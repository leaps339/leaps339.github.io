<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随便说点啥</title>
      <link href="/2020/05/17/sui-bian-shuo-dian-sha/"/>
      <url>/2020/05/17/sui-bian-shuo-dian-sha/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​    一晃2020年已过了大半，突如其来的疫情打乱了许多人的计划，现如今国内形势已趋于稳定，国外还在乱成一锅粥。或许在2020年，我们每个人都有一个共同的心愿—疫情快快结束。</p><p>​    想起2019年的年终总结，毕业设计已经完成，答辩也告一段落，现在只等着成绩出来，然后六月份回学校收拾东西滚蛋了。毕业照、毕业典礼当然是没有了，遗憾是有的，但身处这个形势，在这个2020年，每个人或许都会有遗憾吧。现在能做的，只有接受这些事实，迎接未知的、并不知道是否美好的未来。</p><p>​    还有找工作的事。当初的满腔热血被彻底浇灭在家里，虽然也面了挺多的吧，但最后都是不了了之。“学学不踏实，玩玩不尽兴”，这真是在家里的真实写照。因此答辩一结束，我就迫不及待的跑到广州了，住了两天宾馆，跑了一天，也是找到了个不错的住所，周围都是小区，楼下就是总公交站，离地铁口也只有10分钟脚程，终于在广州也有了自己的小窝。</p><p>​    在小窝里呆了一个周末，东西也置办的差不多了。当初在家准备来广州时心情也是挺复杂的，毕竟第一次租房而且是住宾馆，是没有退路的选择。不过此刻再去想想，好像一切都没什么大不了吧，不过我应该是幸运的，看的第一个房子就相中的（虽然后面依然跑了一整天）。还是要感谢实习时的一个同事，提供了网上找房的一个可靠途径，并且大半夜的也陪我转了一下附近的老小区。</p><p>​    明天就要正式上班了，也是真正的走入社会，去迎接新的生活。现在的心情，嗯。。。怎么说呢，还是有些复杂吧。不过不要紧，或许明天这个时候我坐在这里时，心情应该是无比的舒畅吧。</p><p>​    Fighting！！！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令学习</title>
      <link href="/2020/04/30/git-ming-ling-xue-xi/"/>
      <url>/2020/04/30/git-ming-ling-xue-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul><li>初始化或者修改全局用户名：git config –global user.name “your name”</li><li>初始化或者修改全局提交邮箱git config –global user.email “<a href="mailto:user@example.com" target="_blank" rel="noopener">user@example.com</a>“</li><li>添加到文件暂存区 git add &lt;file.txt&gt; 可添加多个文件，空格隔开</li><li>提交文件到工作区 git commit -m “提交文字说明”</li><li>查看暂存区与工作区文件状态 git status</li><li>修改提交后的文件，可通过git diff查看修改的内容</li><li>git diff 查看的是仓库文件与暂存区文件的区别，git diff –cached查看的是暂存区与上一次提交后也就是分支里面文件的区别</li><li>查看工作区与提交后分支里面的文件差异可以用git diff HEAD – &lt;file.txt&gt;</li><li>显示从最近到最远的提交日志 git log</li><li>回退版本 git reset -hard HEAD^ HEAD代表当前版本，加上^表示上一个版本，两个依次类推。也可写成HEAD~100，也可写成某一次确定的提交ID，在git log可看到，前几位ID即可</li><li>git reflog 可以查看命令历史，包括每一次提交的ID，准确定位要回退的版本</li><li>cat &lt;file.txt&gt; 可以查看文件内容</li><li>修改文件，未add到暂存区；或者add到暂存区后又修改文件后，未add。使用git checkout – file.txt可还原到上一次add或commit的操作版本。</li><li>修改文件后，并add到了暂存区，可使用git reset HEAD file.txt 取消add操作（<strong>仅仅是回退了add操作，并未回退文件修改内容</strong>），经试验，同一文件多次add操作在暂存区合并为一次，修改也合并为一次修改。也就是说，多次修改及add操作后，执行git reset HEAD file.txt和git checkout – file.txt后，文件会回到上一次commit后的内容。</li><li>修改文件并add后，有commit到本地仓库，可进行版本回退撤销之前的修改。</li><li>如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout – <file>就可以；如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD <file>，然后再git checkout – <file>；如果你想彻底把版本库的删除掉，先git rm，再git commit 就ok了</file></file></file></li><li>关于git checkout – <file>既可以还原修改的操作，又可以从版本中还原文件。试验后我的理解是：这个操作会先检验暂存区有没有此文件，有的话就代替工作区的文件，没有就将版本库中的此文件代替工作区的文件。</file></li></ul><h1 id="与github相关联"><a href="#与github相关联" class="headerlink" title="与github相关联"></a>与github相关联</h1><p>创建ssh keys：ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“。并在github上进行相应的设置。</p><p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；关联后，使用命令git push -u origin master第一次推送master分支的所有内容；此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p><p>SSH协议：<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:leaps339/learngit.git https协议：<a href="https://github.com/leaps339/learngit.git" target="_blank" rel="noopener">https://github.com/leaps339/learngit.git</a></p><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p><p>克隆可用git clone 对应协议仓库</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><ul><li>查看分支：git branch</li><li>创建分支：git branch <name></name></li><li>转换分支：git checkout <name></name></li><li>创建并转换分支：git checkout -b <name></name></li><li>合并某分支到当前分支：git merge <name></name></li><li>删除分支：git branch -d <name></name></li><li>分支冲突时合并会有meger failed提示，此时需手动修改文件冲突再进行add、commit操作。完成合并后删除分支</li><li>git log –graph 可以查看分支合并图</li><li>一般合并是fast forward模式，只是将head指针移动了位置，所以合并较快，但不能看到合并历史。</li><li>合并分支禁用fast forward：git merge –no-ff -m “提交说明”。将合并后的结果再一次进行commit操作，则可以看到合并历史。</li><li>在A分支上进行工作，有紧急情况需另开分支B解决其他问题。A分支上的工作并未完成，此时切换分支会将未完成工作带到B。在完成B工作后执行commit会将在A中的add的后的文件一并提交（在A中修改完文件没add不会受影响），并且Git规定在哪个分支上提交，就是在那个分支上工作。所以在切换时需使用git stash保存状态。<a href="https://blog.csdn.net/w522301629/article/details/81331273" target="_blank" rel="noopener">链接</a></li><li>使用git stash后会保存工作区与暂存区的数据并清空暂存区。可使用git stash lish查看所有保存的stash，通过git stash apply恢复，git stash drop删除保存的stash。也可使用git stash pop，恢复的同时把stash也删了。当然可通过git stash apply stash@{0}恢复指定id的stash。</li><li>在另开一个分支A后没有合并分支A就要将其删除，可以使用git branch -D <name> 强行删除</name></li><li></li></ul><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ul><li>使用git remote -v查看远程库详细分支信息</li><li>本地新建的分支不推送远程，其他人就是不可见的</li><li>通过git push origin branch-name从本地推送分支，推送失败则说明有冲突，使用git pull将远程库中最新的提交抓取下来</li><li>在本地创建和远程库分支对应的分支：git checkout -b branch-name origin/branch-name。本地分支名最好和远程分支一样</li><li>可使用git branch –set-upstream branch-name origin/branch-name将本地分支与远程分支关联</li><li>git pull抓取分支后手动解决冲突再commit，然后进行push操作</li><li></li></ul><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><ul><li>为某次提交打上一个标签，便于查找而不是用commit ID。相当于ip地址与域名的关系</li><li>git tag <tagname>为当前最近一次commit打上标签，也可以在最后指定commit ID</tagname></li><li>可以创建带有说明的标签git tag -a <tagname> -m “说明文字” <commit id></commit></tagname></li><li>git show tag可以查看标签说明</li><li>git tag可以查看所有标签</li><li>将指定本地标签推到远程仓库：git push origin <tagname></tagname></li><li>将所有未推送的标签推到远程仓库：git push origin –tags</li><li>删除指定标签：git tag -d <tagname></tagname></li><li>删除已经推到远程仓库的标签，先本地删除，然后删除远程仓库标签：git push origin :refs/tags/<tagname></tagname></li><li></li></ul><h1 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h1><ul><li>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：</li><li></li></ul><pre><code># 此为注释 – 将被 Git 忽略*.cs       # 忽略所有 .cs 结尾的文件!ABC.cs    # 但 ABC.cs 除外/BLL       # 仅仅忽略项目根目录下的 BLL 文件，不包括 subdir/BLLbuild/     # 忽略 build/ 目录下的所有文件doc/*.txt  # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</code></pre><p>规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p><pre><code>git rm -r --cached .git add .git commit -m &#39;update .gitignore&#39;</code></pre><p>另外有一个自动生成.gitignore文件内容的网站<a href="https://www.gitignore.io/" target="_blank" rel="noopener">链接</a></p><ul><li>可以通过git config –global alias.自定义命令 原始命令  为命令配置别名，相当于宏定义，方便记忆与敲打。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神奇的UI--小船呀游啊游</title>
      <link href="/2020/04/28/shen-qi-de-ui-xiao-chuan-ya-you-a-you/"/>
      <url>/2020/04/28/shen-qi-de-ui-xiao-chuan-ya-you-a-you/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>疫情原因，至今不允许返校。可怜今年毕业，毕业照与毕业典礼是想都不用想了，毕业答辩已经转为线上了，连毕业证也许都不能亲自去领了，真是悲哀！呆在家里都要半年了，哎，一个人是懒得是啥都不想干，想研究点东西也总是钻不进去，天天看着逐渐膨胀的身体发呆，更是悲哀啊！</p><h1 id="神奇的-UI"><a href="#神奇的-UI" class="headerlink" title="神奇的 UI"></a>神奇的 UI</h1><p>几天前看到鸿阳大神公众号上的一篇推文，里面讨论的 UI 效果也确实让我这个小白惊叹。</p><img src="/2020/04/28/shen-qi-de-ui-xiao-chuan-ya-you-a-you/0.gif" width="200" height="200"><p>第一眼看上去好像没什么大不了的，不就是个列表么，仔细看下，不由得一声卧槽，这个小船！反正我看到这个 UI 效果是没有一点头绪，刚好有人已经做出来，所以就看着别人的 demo，了解下原理，然后试着自己做一个同样的效果。</p><p>整体来说搞懂三个方面的问题就可以了：</p><ul><li>路径的绘制</li><li>小船的移动</li><li>滑动进度</li></ul><h1 id="路径绘制"><a href="#路径绘制" class="headerlink" title="路径绘制"></a>路径绘制</h1><p>通过<code>Path</code>类，合理运用内部方法可以创建并保存一条完整的路径。通过<code>moveTo(x,y)</code>方法移动路径的起始点到指定点，然后通过<code>rLineTo(dx,dy)</code>方法绘制一条从当前点到指定点的直线，注意此处的 (dx,dy) 坐标是相对于当前点的坐标，而<code>lineTo(x,y)</code>方法中的坐标使用的则是原始坐标系。</p><p><code>arcTo(left,top,right,bottom,startAngle,sweepAngle,forceMoveTo)</code>方法则用来添加一段圆弧。left、top、right、bottom 参数决定圆弧位置及大小；startAngle 参数决定了圆弧的起始角度，0 度代表默认是向下；sweepAngle 参数决定了圆弧对应的度数，该数为正时代表顺时针方向，为负时代表逆时针方向；forceMoveTo 是一个布尔值，为 false 则代表如果之前路径的最后一个点与圆弧的起始点不是一个点时，会将两个点连接起来，也就是说始终是一条路径，为 true 则不会连接，则可能会变为两条路径。</p><p>完整的代码如下：</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getPath</span><span class="token punctuation">(</span>pos<span class="token operator">:</span> Int<span class="token punctuation">,</span> width<span class="token operator">:</span> Float<span class="token punctuation">,</span> height<span class="token operator">:</span> Float<span class="token punctuation">)</span><span class="token operator">:</span> Path <span class="token punctuation">{</span>    <span class="token keyword">val</span> radius <span class="token operator">=</span> <span class="token number">100f</span>    <span class="token keyword">val</span> firstHeight <span class="token operator">=</span> height <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">val</span> firstWidth<span class="token operator">:</span> Float    <span class="token keyword">val</span> lastWidth<span class="token operator">:</span> Float    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        firstWidth <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">8</span>        lastWidth <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">7</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        firstWidth <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">7</span>        lastWidth <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">8</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">moveTo</span><span class="token punctuation">(</span>firstWidth<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//添加直线</span>        <span class="token function">rLineTo</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> firstHeight<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//添加圆弧</span>            <span class="token function">arcTo</span><span class="token punctuation">(</span>firstWidth<span class="token punctuation">,</span>                    firstHeight <span class="token operator">-</span> radius<span class="token punctuation">,</span>                    firstWidth <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span>                    firstHeight <span class="token operator">+</span> radius<span class="token punctuation">,</span>                    <span class="token number">180f</span><span class="token punctuation">,</span>                    <span class="token operator">-</span><span class="token number">90f</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token function">rLineTo</span><span class="token punctuation">(</span>lastWidth <span class="token operator">-</span> firstWidth <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span>            <span class="token function">arcTo</span><span class="token punctuation">(</span>lastWidth <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span>                    firstHeight <span class="token operator">+</span> radius<span class="token punctuation">,</span>                    lastWidth<span class="token punctuation">,</span>                    firstHeight <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span>                    <span class="token operator">-</span><span class="token number">90f</span><span class="token punctuation">,</span>                    <span class="token number">90f</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">arcTo</span><span class="token punctuation">(</span>firstWidth <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span>                    firstHeight <span class="token operator">-</span> radius<span class="token punctuation">,</span>                    firstWidth<span class="token punctuation">,</span>                    firstHeight <span class="token operator">+</span> radius<span class="token punctuation">,</span>                    <span class="token number">0f</span><span class="token punctuation">,</span>                    <span class="token number">90f</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token function">rLineTo</span><span class="token punctuation">(</span>lastWidth <span class="token operator">-</span> firstWidth <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span>            <span class="token function">arcTo</span><span class="token punctuation">(</span>lastWidth<span class="token punctuation">,</span>                    firstHeight <span class="token operator">+</span> radius<span class="token punctuation">,</span>                    lastWidth <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span>                    firstHeight <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> radius<span class="token punctuation">,</span>                    <span class="token operator">-</span><span class="token number">90f</span><span class="token punctuation">,</span>                    <span class="token operator">-</span><span class="token number">90f</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">rLineTo</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> firstHeight <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> radius<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从 y 轴来看，firstHeight 将路径分为两部分，上面是一条直线，下面则是两个圆弧加一段直线；firstWidth 与 lastWidth 代表路径在 x 轴上的两个拐点，分别是八分之一处与八分之七处；pos 则用于区分两种不同的路径。</p><p>有了路径之后，就可以通过<code>canvas?.drawPath(mPath, mPaint)</code>将这段路径绘制出来。现在结合 RecycleView，完整的河道图就出来啦。</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> RiverView <span class="token operator">:</span> ViewGroup <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> attributeSet<span class="token operator">:</span> AttributeSet<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attributeSet<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mPaint <span class="token operator">=</span> <span class="token function">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> style <span class="token operator">=</span> Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>STROKE <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> mPath<span class="token operator">:</span> Path    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token function">setWillNotDraw</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">setPath</span><span class="token punctuation">(</span>path<span class="token operator">:</span> Path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPath <span class="token operator">=</span> path        mPathMeasure <span class="token operator">=</span> <span class="token function">PathMeasure</span><span class="token punctuation">(</span>mPath<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">setRiverColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPaint<span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">setRiverWidth</span><span class="token punctuation">(</span>width<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPaint<span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> width    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLayout</span><span class="token punctuation">(</span>changed<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> l<span class="token operator">:</span> Int<span class="token punctuation">,</span> t<span class="token operator">:</span> Int<span class="token punctuation">,</span> r<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token operator">:</span> Canvas<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>        canvas<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>mPath<span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> RowingViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span>mRiverView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> width <span class="token operator">=</span> context<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>displayMetrics<span class="token punctuation">.</span>widthPixels<span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> context<span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token number">32f</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> height <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token number">240f</span><span class="token punctuation">)</span>            <span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>cardColor<span class="token punctuation">)</span>            <span class="token function">setPath</span><span class="token punctuation">(</span><span class="token function">getPath</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">setRiverWidth</span><span class="token punctuation">(</span><span class="token number">100f</span><span class="token punctuation">)</span>            <span class="token function">setRiverColor</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>riverColor<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图如下：</p><img src="/2020/04/28/shen-qi-de-ui-xiao-chuan-ya-you-a-you/1.jpg" width="200" height="200"><h1 id="小船的移动"><a href="#小船的移动" class="headerlink" title="小船的移动"></a>小船的移动</h1><p>对路径进行具体的处理，包括获取某一个进度点、该点的方向等信息，就需要用到 PathMeasure 类了。</p><p>在创建 PathMeasure 对象时，需要传入一个 Path 对象，代表需要处理的路径。</p><pre class="line-numbers language-kotlin"><code class="language-kotlin">mPathMeasure <span class="token operator">=</span> <span class="token function">PathMeasure</span><span class="token punctuation">(</span>mPath<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二个参数代表是否将 Path 处理为闭合的。也就是说，当该参数为 true 时，那么 PathMeasure 在处理 Path 时，即使传入的 Path 不是闭合的，PathMeasure 也会当做闭合的 Path 的去处理，需要注意的是，只是当做闭合的处理，而不是真的将 Path 变为闭合的，不会对原先的 Path 产生影响。</p><p>那么怎么样根据一个进度值就能使小船进行相应的移动呢，此时就需要用到 PathMeasure 中的 getLength 与 getPosTan 方法了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获得路径的长度</span><span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取该路径 disance 处的点的坐标及方向的切线值</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getPosTan</span><span class="token punctuation">(</span><span class="token keyword">float</span> distance<span class="token punctuation">,</span> <span class="token keyword">float</span> pos<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> tan<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说下 getPosTan 方法，distance 代表长度，也就是说路径 distance 处的点，这个变量可以传入<code>progress* mPathMeasure.getLength()</code>，progress 取值 0-1，代表进度值，这样就可以传入不同的 progress 值进行移动；pos[] 则要求我们传入一个 float 数组，当方法运行完成后该数组中就会包含此点的坐标 (pos[0],pos[1])；tan[] 同样是 float 数组，方法完成后同样会产生 tan[0] 与 tan[1] 两个值，代表了该点的方向值，怎么理解这两个值呢，此时就需要借助 Math 中的 tan 系列函数。</p><pre class="line-numbers language-java"><code class="language-java">Math<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先说明一下，在代码中涉及到度数时，一般都采用了弧度去表示。弧度与度数的关系是：半径为 1 的圆中任意角度所对应的弧长，就是该角度的弧度。所以 360°对应的弧度就是 2π，180°的弧度值为π。</p><p><code>Math.tan(PI / 4)</code>也就是 tan(45°)，计算 45 度角的正切值，结果是 1。</p><p><code>Math.atan(1)</code>也就是 arctan(1)，计算正切值 1 所对应的角度，结果是 PI/4。这两个的关系就是 tan(arctan(x)) = x。</p><p>而<code>Math.atan2(y,x)</code>与<code>Math.atan(x)</code>的用途是一样的，只是传入的参数不同，这里的 y 代表角度对边的长度，x 代表角度邻边的长度，可以说 atan2(y,x) 与 atan(y / x) 得出的结果是一样的。或许看下面的图会更明白一点。</p><img src="/2020/04/28/shen-qi-de-ui-xiao-chuan-ya-you-a-you/2.jpg"><p>明白了这个以后，那么 tan[] 中存储的值就是 atan2(y,x) 中的 x、y 值。所以该点的旋转角度就是</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token function">atan2</span><span class="token punctuation">(</span>mTan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mTan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> PI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于 atan2 方法返回的是弧度值，所以通过*180/PI 将其转为对应的角度。好了，有了位置以及对应的旋转角度，就可以在 onDraw 方法中处理小船的位置及方向啦。</p><pre class="line-numbers language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">move</span><span class="token punctuation">(</span>progress<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">::</span>mRowingView<span class="token punctuation">.</span>isInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//小船</span>            mRowingView <span class="token operator">=</span> <span class="token function">RowingView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>            <span class="token function">addView</span><span class="token punctuation">(</span>mRowingView<span class="token punctuation">)</span>            mRowingView<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        mPathMeasure<span class="token punctuation">.</span><span class="token function">getPosTan</span><span class="token punctuation">(</span>progress <span class="token operator">*</span> mPathMeasure<span class="token punctuation">.</span>length<span class="token punctuation">,</span> mPos<span class="token punctuation">,</span> mTan<span class="token punctuation">)</span>        <span class="token function">postInvalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token operator">:</span> Canvas<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>        canvas<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>mPath<span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span>mRowingView<span class="token punctuation">.</span>isInitialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mRowingView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>                translationX <span class="token operator">=</span> mPos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> mRowingView<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span>                translationY <span class="token operator">=</span> mPos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> mRowingView<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span>                rotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">atan2</span><span class="token punctuation">(</span>mTan<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mTan<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> PI <span class="token operator">+</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们调用 move 函数时，小船就会根据传入的 progress 移动到对应的位置啦。</p><h1 id="滑动进度"><a href="#滑动进度" class="headerlink" title="滑动进度"></a>滑动进度</h1><p>好了，现在路径有了，小船也可以移动了，剩下的就是处理当手指滑动列表时，小船也要滑动对应的进度。监听 RecycleView 的滑动是不可避免的了，具体的处理代码如下。</p><pre class="line-numbers language-kotlin"><code class="language-kotlin">mRecycleView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            layoutManager <span class="token operator">=</span> mLayoutManager            adapter <span class="token operator">=</span> mAdapter            <span class="token function">addOnScrollListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span><span class="token function">OnScrollListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token operator">:</span> RecyclerView<span class="token punctuation">,</span> dx<span class="token operator">:</span> Int<span class="token punctuation">,</span> dy<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onScrolled</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>                    <span class="token keyword">val</span> computeVerticalScrollOffset <span class="token operator">=</span> mRecycleView<span class="token punctuation">.</span><span class="token function">computeVerticalScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">val</span> distance <span class="token operator">=</span> <span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token number">240f</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>mAdapter<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>mRecycleView<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>mAdapter<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size<span class="token punctuation">)</span>                    <span class="token keyword">val</span> progress <span class="token operator">=</span> computeVerticalScrollOffset <span class="token operator">%</span> distance <span class="token operator">/</span> distance                    <span class="token keyword">val</span> pos <span class="token operator">=</span> computeVerticalScrollOffset <span class="token operator">/</span> distance<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token function">move</span><span class="token punctuation">(</span>progress<span class="token punctuation">,</span> pos<span class="token punctuation">)</span>                    post <span class="token punctuation">{</span>                        mAdapter<span class="token punctuation">.</span><span class="token function">notifyItemChanged</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">move</span><span class="token punctuation">(</span>progress<span class="token operator">:</span> Float<span class="token punctuation">,</span> pos<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> holder <span class="token operator">=</span> mRecycleView<span class="token punctuation">.</span><span class="token function">findViewHolderForAdapterPosition</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> RowingAdapter<span class="token punctuation">.</span>RowingViewHolder        holder<span class="token operator">?</span><span class="token punctuation">.</span>itemView<span class="token operator">?</span><span class="token punctuation">.</span>findViewById<span class="token operator">&lt;</span>RiverView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>mRiverView<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先 computeVerticalScrollOffset 是 RecycleView 当前的总滑动长度。</p><p>然后，<code>dp2px(240f + 10 * 2).times(mAdapter.data.size)</code>计算了填充完数据后的 RecycleView 的高度，而<code>mRecycleView.height</code>表示当前 RecycleView 在屏幕上显示出来高度。之所以要减去这个，是因为小船刚开始在 RecycleView 的顶部，当我们滑动 RecycleView 到底部时，小船也需要移动到底部，这之间的距离就差了一个 Recycle 的 Height。之后除以<code>mAdapter.data.size</code>，得到的是每一个卡片所对应的滑动距离，即 distance。</p><p>之后，<code>computeVerticalScrollOffset % distance</code>获得的值表示在一个卡片上小船的进度，除以 distance 就得出了进度百分比 progress。</p><p><code>computeVerticalScrollOffset / distance</code>计算出哪个卡片上的小船需要移动。有了 pos 与 progress，就知道了当前 RecycleView 的滑动进度对应的小船的滑动进度，对小船进行移动就行了。</p><p>还有一点，当小船移动到下一个卡片时，当前卡片上的小船需要消失，因此还需在 onBindViewHolder 函数中做些处理。</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> RowingViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span>mRiverView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> width <span class="token operator">=</span> context<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>displayMetrics<span class="token punctuation">.</span>widthPixels<span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> context<span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token number">32f</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> height <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span><span class="token number">240f</span><span class="token punctuation">)</span>            <span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>cardColor<span class="token punctuation">)</span>            <span class="token function">setPath</span><span class="token punctuation">(</span><span class="token function">getPath</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">setRiverWidth</span><span class="token punctuation">(</span><span class="token number">100f</span><span class="token punctuation">)</span>            <span class="token function">setRiverColor</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">.</span>riverColor<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span>mRiverView <span class="token operator">!=</span> lastRiverView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRiverView<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">initRowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                lastRiverView<span class="token operator">?</span><span class="token punctuation">.</span>mRowingView<span class="token operator">?</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE            <span class="token keyword">if</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span>mRiverView<span class="token punctuation">.</span><span class="token function">initRowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span>mRiverView<span class="token punctuation">.</span>mRowingView<span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE            lastRiverView <span class="token operator">=</span> holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span>mRiverView        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，现在所有的问题都解决了，小船就可以快乐的游起来了。</p><img src="/2020/04/28/shen-qi-de-ui-xiao-chuan-ya-you-a-you/3.gif"><p>代码已上传至<a href="https://github.com/leaps339/RowingView" target="_blank" rel="noopener">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第10期）---谈谈对HandlerThread与AsyncTask的理解</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-10-qi-tan-tan-dui-handlerthread-yu-asynctask-de-li-jie/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-10-qi-tan-tan-dui-handlerthread-yu-asynctask-de-li-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题 </a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天的那个面试弄得我一脸懵逼，现在有点空闲时间，仔细的探讨一下当时的问题。印象最深的就是关于 HandlerThread 与 AsyncTask 的问题。首先列一下探讨过程中想到的问题以及面试时问的问题。</p><ul><li>HandlerThread 与 AsyncTask 的大致实现原理</li><li>HandlerThread 与 AsyncTask 完成耗时任务后会怎么样</li><li>HandlerThread 与 AsyncTask 中的耗时事件处理是异步还是同步，可不可以变为另一种处理</li><li>HandlerThread 与 AsyncTask 内存泄漏的可能性</li><li>HandlerThread 与 AsyncTask 使用中的注意事项</li><li>HandlerThread 与 AsyncTask 的实际应用场景</li><li>给定大量的耗时任务，耗时操作并不连续，耗时时长长短不一，用哪个</li></ul><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>先简单讲讲这两个的源码吧，都挺简单的，并没有那么复杂。<strong>以下源码来自于 Android-28</strong></p><h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><blockquote><p>HandlerThread 实际上是 Thread+Looper+Handler 的一个简单封装。</p></blockquote><p>HandlerThread 类继承 Thread 类，所以需要 start() 方法来开启线程。</p><pre class="line-numbers language-java"><code class="language-java">    HandlerThread handlerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"workThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handlerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Handler threadHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>handlerThread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据不同的 message 类型处理不同的耗时任务</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是简单的使用方法。创建 Handler 时需要传入 HandlerThread 中的 Looper 对象，这样 handlerMessage 方法就会在子线程中处理耗时任务。需要耗时任务可以通过 threadHandler.sendMessage() 发送消息，然后下 handlerMessage 方法中进行处理。</p><p>源码中最重要的就是一个重写的 run 方法。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTid <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//唤醒线程可以获取 Looper 对象了</span>        <span class="token punctuation">}</span>        Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>mPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也很简单，在我们执行 handlerThread.start() 开启一个线程后，就会执行此方法。通过 Looper.prepare() 在此线程中创建一个 Looper 对象，然后通知其他线程可以获取 Looper 对象，设置线程优先级。onLooperPrepared() 是一个空的方法，我们可以重写此方法进行一些 Looper 开启 loop 循环之前的准备。</p><p>一切都准备好之后，就是通过 Handler 发送消息，然后在 handlerMessage() 中进行耗时操作。简单说明一下，Handler 类中的 handlerMessage() 方法在哪个线程中执行，是由 Handler 中的 Looper 对象所在的线程决定的，这是因为在 loop 循环中通过 msg.target.dispatchMessage()—&gt;handleMessage() 间接地调用了 handlerMessage 方法，而 Looper.loop 是在子线程中执行的。具体可看 android 的消息机制详解—<a href="https://juejin.im/post/5cf750666fb9a07ee27b03b2" target="_blank" rel="noopener">每日一道面试题（第 9 期）—谈谈 Handler 机制和原理 </a></p><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><blockquote><p>AsyncTask 则是线程池与 Handler 的封装</p></blockquote><p>一些基本使用就不在详细说明了，主要来看看源码。首先是构造方法，有三个。无参、Handler、Looper，前两个都会调用第三个构造方法。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">AsyncTask</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Looper callbackLooper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandler <span class="token operator">=</span> callbackLooper <span class="token operator">==</span> null <span class="token operator">||</span> callbackLooper <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token function">getMainHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>callbackLooper<span class="token punctuation">)</span><span class="token punctuation">;</span>        mWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerRunnable</span><span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Result<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> Result <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                mTaskInvoked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//noinspection unchecked</span>                    result <span class="token operator">=</span> <span class="token function">doInBackground</span><span class="token punctuation">(</span>mParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> tr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mCancelled<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> tr<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">postResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        mFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Result<span class="token operator">></span><span class="token punctuation">(</span>mWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"An error occurred while executing doInBackground()"</span><span class="token punctuation">,</span>                            e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有点长，但其实就三步操作。</p><ul><li>初始化 mHandler。mHandler 是用来转换线程的。 当传入的 Looper 对象不为空且不是主线程的 Looper 时，就创建一个新的 Handler，否则就获取主线程的 handler。getMainHandler() 就是一个简单的创建新的 Handler 对象并将主线程的 Looper 对象传入进去的操作。</li><li>初始化 mWorker。mWorker 是一个实现了 Callable 接口的类的对象。初始化时重写了 call 方法，耗时任务 doINbackGround 被封装在这里面执行。</li><li>初始化 mFuture。mFuture 是 FutureTask 对象，是 Runnable 与 Future 的子类。将 mWorker 传入 mFuture 对象中。后面就是将此对象传入线程池中进行调度。</li></ul><p>通常使用时通过 execute 方法开启任务，看看源码中干了什么。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> AsyncTask<span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Progress<span class="token punctuation">,</span> Result<span class="token operator">></span> <span class="token function">execute</span><span class="token punctuation">(</span>Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>sDefaultExecutor<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> AsyncTask<span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Progress<span class="token punctuation">,</span> Result<span class="token operator">></span> <span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>Executor exec<span class="token punctuation">,</span>            Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mStatus <span class="token operator">!=</span> Status<span class="token punctuation">.</span>PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>mStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> RUNNING<span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                            <span class="token operator">+</span> <span class="token string">" the task is already running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> FINISHED<span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                            <span class="token operator">+</span> <span class="token string">" the task has already been executed "</span>                            <span class="token operator">+</span> <span class="token string">"(a task can be executed only once)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mStatus <span class="token operator">=</span> Status<span class="token punctuation">.</span>RUNNING<span class="token punctuation">;</span>        <span class="token function">onPreExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mWorker<span class="token punctuation">.</span>mParams <span class="token operator">=</span> params<span class="token punctuation">;</span>        exec<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>execute 中执行的是 executeOnExecutor 方法，并传入 sDefaultExecutor 与耗时任务需要的参数。首先是检查状态，mStatus 是一个枚举变量，有 PENDING、RUNNING、FINSHED 三种状态，这三种状态都是唯一的，按 PENDING—RUNNING—FINISHED 顺序，初始化对象时是 PENDING，在 executeOnExecutor 中变为 RUNNING，在 finish 方法中更新为 FINSHED 状态。因此可以看出 executor 方法只能在一个对象中执行一次，多次执行就会抛出异常。然后更新状态，调用 onPreExecute 方法，我们可以种重写此方法做些进行耗时操作前的准备。传入参数，然后就是 exec.execute 提交任务，也就是构造函数中包装好的 FutureTask 对象。</p><p>这个 exec 是成员变量 sDefaultExecutor，是 AsyncTask 内部定义的静态类，实现了 Executor 接口。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SerialExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//双端队列，按照先进先出的原则储存 FutureTask 对象</span>        <span class="token keyword">final</span> ArrayDeque<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> mTasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runnable mActive<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对传入的 mFuture 又进行了一次封装，以便于串行处理任务</span>            mTasks<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//执行完上一个耗时任务后，选取下一个任务</span>                        <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//选取任务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mActive <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mActive <span class="token operator">=</span> mTasks<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//由此可看出 SerialExecutor 只负责任务的串行处理，真正的耗时任务操作是交给 THREAD_POOL_EXECUTOR 线程池进行调度</span>                THREAD_POOL_EXECUTOR<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mActive<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个静态类，也就是说所有的耗时任务都要经过此类进行串行处理。SerialExecutor 就是为了使耗时任务能够串行的被处理才存在的，真正处理耗时任务的则是 THREAD_POOL_EXECUTOR 线程池。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//获得没有睡眠的 CPU 数量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CPU_COUNT <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// We want at least 2 threads and at most 4 threads in the core pool,</span>    <span class="token comment" spellcheck="true">// preferring to have 1 less than the CPU count to avoid saturating</span>    <span class="token comment" spellcheck="true">// the CPU with background work</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CORE_POOL_SIZE <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>CPU_COUNT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_POOL_SIZE <span class="token operator">=</span> CPU_COUNT <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEEP_ALIVE_SECONDS <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadFactory sThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger mCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cas 操作的 int 变量</span>        <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//记录创建线程的数量</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"AsyncTask #"</span> <span class="token operator">+</span> mCount<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> sPoolWorkQueue <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Executor THREAD_POOL_EXECUTOR<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                CORE_POOL_SIZE<span class="token punctuation">,</span> MAXIMUM_POOL_SIZE<span class="token punctuation">,</span> KEEP_ALIVE_SECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                sPoolWorkQueue<span class="token punctuation">,</span> sThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置核心线程池也受设置的存活时间的影响</span>        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        THREAD_POOL_EXECUTOR <span class="token operator">=</span> threadPoolExecutor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是创建了一个新的线程池，并赋值给静态变量 THREAD_POOL_EXECUTOR，这部分操作是在静态代码块中进行的，也就是说只会在被类加载的时候执行一次。所有的耗时任务都是在这仅有的一个线程池中执行任务。简单说下这个线程池中的参数。</p><ul><li>CORE_POOL_SIZE：核心线程池数量，这个定义的有点复杂，官方解释说，总是希望核心线程数量在 2-4 之间，并且更希望比正在工作的 CPU 数量少 1.</li><li>MAXIMUM_POOL_SIZE：所存在的最大线程数量，也就是核心线程与非核心线程之和的数量。默认为正在工作的 CPU 数量的 2 倍+1。</li><li>KEEP_ALIVE_SECONDS：非核心线程完成任务后保持存活的时间，超时将被销毁。如果设置了 allowCoreThreadTimeOut(true) 属性，则核心线程也受此约束。默认为 30</li><li>TimeUnit.SECONDS：上一个属性的单位，这里是秒。</li><li>sPoolWorkQueue：储存耗时任务的队列，这里用的 LinkBlockingQueue，基于链表实现的阻塞队列，并将储存数量控制在了 128 个。</li><li>sThreadFactory：线程工厂，为线程池提供新线程的创建。ThreadFactory 是一个接口，里面只有一个 newThread 方法。 默认为 DefaultThreadFactory 类。</li></ul><p>剩下的就是线程池中调度 mFuture 执行耗时任务，执行其中的 mFuture 中 Callable 接口的 call 方法。其实就是上面说到的构造方法中初始化的 mWorker，其中对 call 方法进行了重写，在来了解下。</p><pre class="line-numbers language-java"><code class="language-java">    mWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerRunnable</span><span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Result<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> Result <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//标记耗时任务已被执行</span>                mTaskInvoked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//noinspection unchecked</span>                    result <span class="token operator">=</span> <span class="token function">doInBackground</span><span class="token punctuation">(</span>mParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> tr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//若发生异常则设置任务为取消状态</span>                    mCancelled<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> tr<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//无论如何，处理结果</span>                    <span class="token function">postResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，在进行耗时操作后，无论是处理完，还有发生异常，都要 postResult() 方法进行收尾。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> Result <span class="token function">postResult</span><span class="token punctuation">(</span>Result result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Message message <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_POST_RESULT<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">AsyncTaskResult</span><span class="token operator">&lt;</span>Result<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 Handler 包装了一个信息，发送了出去。标记为 MESSAGE_POST_RESULT，意思就是耗时任务的结果。这个 Handler，就是构造函数中初始化的那个 Handler 对象，只不过在通过 getMainHandler 中是用自定义的静态内部 Handler 类进行了包装。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> Handler <span class="token function">getMainHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalHandler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sHandler<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InternalHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">InternalHandler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"RawUseOfParameterizedType"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//AsyncTask 的静态内部类，方便传递结果数据与对应的 AsyncTask 对象</span>            AsyncTaskResult<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result <span class="token operator">=</span> <span class="token punctuation">(</span>AsyncTaskResult<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> MESSAGE_POST_RESULT<span class="token operator">:</span>                    <span class="token comment" spellcheck="true">// There is only one result</span>                    result<span class="token punctuation">.</span>mTask<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>mData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MESSAGE_POST_PROGRESS<span class="token operator">:</span>                    result<span class="token punctuation">.</span>mTask<span class="token punctuation">.</span><span class="token function">onProgressUpdate</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>mData<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送的消息就在这里被处理了。如果是 MESSAGE_POST_RESULT，就调用 finish 方法；如果是 MESSAGE_POST_PROGRESS，就是 onProgressUpdate(result.mData) 方法，也就是我们可以用来重写更新进度的操作。MESSAGE_POST_PROGRESS 类消息只有在你调用 publishProgress 方法时才会被调用。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span>Result result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onCancelled</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">onPostExecute</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mStatus <span class="token operator">=</span> Status<span class="token punctuation">.</span>FINISHED<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>finish 方法中会根据 mCancel 的状态决定调用 onCancelled(result) 还是 onPostExecute(result)，也就是说这两个只会调用其中一个方法，这两个方法也是我们在使用 AsyncTask 需要重写的方法。mCanael 我们可以通过调用 cancel() 方法改变状态。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mCancelled<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在 mFuture 中中断线程</span>        <span class="token keyword">return</span> mFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个内部大致的流程就差不过了。将耗时任务封装进 FutureTask，SerialExecutor 对 FutureTask 在进行包装使耗时任务可以串行执行，最后由 THREAD_POOL_EXECUTOR 线程池进行真正的耗时任务调度处理。</p><h1 id="关于HandlerThread与AsyncTask的FAQ"><a href="#关于HandlerThread与AsyncTask的FAQ" class="headerlink" title="关于HandlerThread与AsyncTask的FAQ"></a>关于HandlerThread与AsyncTask的FAQ</h1><h2 id="大致实现原理"><a href="#大致实现原理" class="headerlink" title="大致实现原理"></a>大致实现原理</h2><ul><li>HandlerThread：开启一个子线程，创建新的 Looper 并开启 looper 循环，使子线程一直存在，直到 loop 循环退出。<br>使用时初始化 HandlerThread，并 new 一个 Handler 并传入 Handler 中的 Looper，就可以通过 handler 发送消息，在 handlerMessage 中接受消息并执行相应的耗时任务。</li><li>AsyncTask：通过 executor 将封装了 doInBackground 中的耗时任务的 FutureTask 对象传入到 SerialExecutor 中，SerialExecutor 串行的将任务发送给 THREAD_POOL_EXECUTOR 线程池进行调度。</li></ul><h2 id="完成耗时任务后会怎么样"><a href="#完成耗时任务后会怎么样" class="headerlink" title="完成耗时任务后会怎么样"></a>完成耗时任务后会怎么样</h2><ul><li>HandlerThread 是 loop 循环+Handler 消息处理机制，也就是说，只要 loop 循环不退出，那么线程就不会停止，需要处理耗时任务只需要 Handler 发送对应类型的消息即可。</li><li>AsyncTask 的耗时任务是交给线程池去调度，耗时任务完成后线程的存活与否有线程池的特性决定。而 AsyncTask 的 execute 方法执行一次后，就不可以在此调用。因为内部状态是严格按照 PENDING、RUNNING、FINISHED 顺序变化，不可逆转。在 executeOnExecutor 方法中会检查状态并抛出异常。</li></ul><h2 id="耗时事件处理是异步还是同步，可不可以变为另一种处理"><a href="#耗时事件处理是异步还是同步，可不可以变为另一种处理" class="headerlink" title="耗时事件处理是异步还是同步，可不可以变为另一种处理"></a>耗时事件处理是异步还是同步，可不可以变为另一种处理</h2><h3 id="HandlerThread-1"><a href="#HandlerThread-1" class="headerlink" title="HandlerThread"></a>HandlerThread</h3><p>HandlerThread 是在子线程的 loop 循环中进行的耗时操作，只有当前的耗时操作完成，才能获取下一个消息处理，所以是串行的。至于变为并行的，不可以。简单验证下</p><pre class="line-numbers language-java"><code class="language-java">    SimpleDateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>Locale<span class="token punctuation">.</span>US<span class="token punctuation">)</span><span class="token punctuation">;</span>    Handler threadHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_login<span class="token punctuation">)</span><span class="token punctuation">;</span>        HandlerThread handlerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerThread</span><span class="token punctuation">(</span><span class="token string">"workThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handlerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>handlerThread<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"HandlerThread"</span><span class="token punctuation">,</span> <span class="token string">"message"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>what <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoginClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        threadHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/6/21/16b78928e814aeae?w=1213&h=112&f=png&s=30223" alt></p><h3 id="AsyncTask-1"><a href="#AsyncTask-1" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><p>自定义一个简单的 AsyncTask</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyAsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">"AsyncTask"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token function">MyAsyncTask</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> String <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> voids<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPostExecute</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"AsyncTask"</span><span class="token punctuation">,</span> string <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们进行一连串的耗时任务时，就会串行处理</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#7"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/6/21/16b789e070d740dd?w=1191&h=178&f=png&s=48637" alt><br>从结果中可以看出严格的按照先入先出串行处理任务。那么能不能变为并发的呢？在源码分析中我们知道串行是受 SerialExecutor 对象进行控制的，而此对象是在 execute 中通过 return executeOnExecutor(sDefaultExecutor, params) 传入进去的。而刚好我们可以调用 executeOnExecutor 方法。所以我们可以自定义线程池甚至传入 AsyncTask 的 THREAD_POOL_EXECUTOR 线程池跳过 SerialExecutor 的串行控制，直接用线程池进行并发处理任务。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#7"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">MyAsyncTask</span><span class="token punctuation">(</span><span class="token string">"AsyncTask#8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/6/21/16b789bcbd9aece7?w=1185&h=176&f=png&s=47966" alt><br>从结果中可以看出，是四个并发进行的任务处理。为什么是 4 个呢？这个是线程池的调度问题。测试用的手机正在工作 CPU 数目是 8，所以核心线程池数量是 Math.max(2, Math.min(CPU_COUNT - 1, 4)) = 4，最大的线程数量是 CPU_COUNT * 2 + 1 = 17。线程池首先会用核心线程处理任务，核心线程满了后，后面的认为就会被放入阻塞队列，当队列也满后，再来任务的话，就会创建非核心线程，取队首任务进行处理，后来的任务放入队尾。如果非核心线程也满了，在来任务就会抛出异常。有个图可能看着会更明白些。<br><img src="https://user-gold-cdn.xitu.io/2019/6/21/16b78ab2970dc0a0?w=937&h=348&f=png&s=192875" alt><br>所以说任务少是就只是核心线程在并发处理任务。</p><p><strong>那么为什么要默认串行处理任务，那样岂不是丢失了线程池的最大优势？</strong></p><p>这是因为默认线程池其实所能容下的线程并不多，就拿 8 核的例子来看，最大线程数为 17，阻塞队列容量为 128，加起来所能容下的最大线程数为 17+128=145，在高并发的情况下很容易就会满，并且 THREAD_POOL_EXECUTOR 对象在整个应用程序中是唯一的。所以默认是串行处理，如果真的有高并发处理的情况，可以根据需求自定义线程池进行并发处理。</p><h2 id="内存泄漏的可能性"><a href="#内存泄漏的可能性" class="headerlink" title="内存泄漏的可能性"></a>内存泄漏的可能性</h2><ul><li>HandlerThread 的内存泄漏在于一定要记得在 Activity 销毁时手动退出线程。因为 loop 循环是一个死循环，如果不手动退出，就会一直存在。</li><li>AsyncTask 的内存泄漏在于一定要用静态内部类的形式，内部类会默认持有 Activity 的引用，而 Activity 与 AsyncTask 的生命周期并不能确定 Activity 更长。</li></ul><h2 id="使用中的注意事项"><a href="#使用中的注意事项" class="headerlink" title="使用中的注意事项"></a>使用中的注意事项</h2><ul><li>关于 HandlerThread，我没怎么用过，查了网上资料，只有一个说法。给 HandlerThread 设置不同的优先级，cpu 会根据不同的线程优先级对所有线程进行优化。</li><li>以前的资料都是说 AsyncTask 的对象要在主线程创建，可能后来源码做了修改，现在这个在我看来并不需要，因为内部转换线程的 Handler 的创建并不依赖当前线程的 Looper 对象，而是通过 Looper.getMainLooper() 获取的主线程 Looper。当然，onPreExecute 方法是会受 AsyncTask 对象创建时的线程影响的，因为此方法并不是通过 Handler 的消息传递而执行的。</li><li>还有一个就是 AsyncTask 取消线程执行的问题，cancel 并不能真正的立刻终止程序的执行，它只是改变了标记状态的变量，当然 cancel 方法中的 mFuture.cancel(mayInterruptIfRunning)，如果传入 true 也会在 FutureTask 层进行终止线程的操作，但对于一些不可停止的操作，也只能等待任务完成然后根据标记变量状态调用 onCancelled 还是 onPostExecute。所以说我们应该在 doInBackground 方法中尽可能的不断进行状态的检验，在需要返回时尽早的退出线程。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>HandlerThread 实际上就是 Thread+Looper 的结合，所以也就适用于单线程+多个耗时任务的场景，比如网络请求、文件读写。而对于耗时长的多个任务，我个人认为因为串行执行的关系，HandlerThread 并不适用。</li><li>AsyncTask 主要用来耗时任务完成后与 UI 线程的交互，不过默认是串行的，可能这也是官方说明 AsyncTask 尽可能执行耗时几秒的操作，不过可以直接通过 executeOnExecutor 变为并行处理任务。</li></ul><h2 id="给定大量的耗时任务，耗时操作并不连续，耗时时长长短不一，用哪个"><a href="#给定大量的耗时任务，耗时操作并不连续，耗时时长长短不一，用哪个" class="headerlink" title="给定大量的耗时任务，耗时操作并不连续，耗时时长长短不一，用哪个"></a>给定大量的耗时任务，耗时操作并不连续，耗时时长长短不一，用哪个</h2><p>对于这个面试时抛出的问题，我简单说下我的理解。因为我实际开发经验少的可怜，所以说的可能有错误或者很片面，包括上面的几个问题的回答。现在网上的资料真的不敢随便相信，有的还自相矛盾，我忽然明白面试时面试官问我平常都看谁的文章，知道哪些在 Android 方面比较专业的人士的用意了。</p><p>大量的耗时操作，如果任务之间没有什么关联的话，在我看来如果是串行处理的话都不怎么好，因为会阻塞后面的任务，而任务之间并不需要有个前后执行的顺序。所以在 AsyncTask 中并行处理比较好。而如果任务之间有关联，则需串行执行，此时就要看这些耗时任务的执行逻辑是否一致，如果不一致的话那就要自定义多个 AsyncTask，也很是麻烦。在我看来 AsyncTask 更多的是强调与 UI 线程的交互吧。</p><p>其实对于 Android 中的耗时任务处理，HandlerThread、IntentService、AsyncTask、ThreadPoolExecutor 这几个具体应用场景，有哪些差别，还真的说不出来个所以然来，还需努力。（总之就是菜（滑稽））</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第9期）---谈谈Handler机制和原理</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-9-qi-tan-tan-handler-ji-zhi-he-yuan-li/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-9-qi-tan-tan-handler-ji-zhi-he-yuan-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题 </a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="Handler-机制"><a href="#Handler-机制" class="headerlink" title="Handler 机制"></a>Handler 机制</h1><p>Handler 想必接触 Android 的都已经很熟悉了，我们通常用用于子线程与主线程的通信，并在主线程中处理相关消息，比如更改 UI 等。Handler 的消息机制为我们处理线程中的通信确实方便了许多。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>最简单的使用就是在主线程中创建 Handler 对象并重写 handlerMessage() 方法处理消息，在子线程中通过 handler 对象的 sendMessage 方法发送消息。</p><pre class="line-numbers language-java"><code class="language-java">Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO write your message processing code</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//TODO  handling events</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为了简单示例，Handler 才这样写的。这种创建方法会造成内存泄漏，具体愿意以及解决方案在<a href="https://juejin.im/post/5ce286496fb9a07edd29e461" target="_blank" rel="noopener">每日一道面试题（第 1 期）—自定义 handler 如何有效保证内存泄漏问题 </a> 都已经说明，这里不再赘述。</strong></p><p>而关于 Handler 的原理，我们可能会多多少少的了解到与 Looper、Message、MessageQueue 都是离不开的，那么具体是怎麽配合呢？下面我根据消息机制的过程，结合源码一步一步的解析。</p><h1 id="Handler-原理"><a href="#Handler-原理" class="headerlink" title="Handler 原理"></a>Handler 原理</h1><h2 id="创建-Handler-对象"><a href="#创建-Handler-对象" class="headerlink" title="创建 Handler 对象"></a>创建 Handler 对象</h2><p>在我们使用时，首先就是创建 Handler，那我们看一下 Handler 的构造函数都干了些什么吧。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Callback callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FIND_POTENTIAL_LEAKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span><span class="token operator">></span> klass <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> klass<span class="token punctuation">.</span><span class="token function">isMemberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> klass<span class="token punctuation">.</span><span class="token function">isLocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Modifier<span class="token punctuation">.</span>STATIC<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"The following Handler class should be static or leaks might occur: "</span> <span class="token operator">+</span>                    klass<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取本地 TLS 存储区的 Looper 对象引用</span>        mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLooper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                <span class="token string">"Can't create handler inside thread "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">+</span> <span class="token string">" that has not called Looper.prepare()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用 Looper 中的 MessageQueue</span>        mQueue <span class="token operator">=</span> mLooper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>        mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">,</span> Callback callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLooper <span class="token operator">=</span> looper<span class="token punctuation">;</span>        mQueue <span class="token operator">=</span> looper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>        mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好吧，很多构造函数，不过有用的就是这两个，其他都是调用这两个而已。从两个对比可以看出，如果你没有传入 Looper 对象，那么就会通过 Looper.myLooper() 获取。传入的话，就是用自定义的，并且 MessageQueue 一直是使用 Looper 中的 MessageQueue，所以这里出现了第两个重要结论：</p><ul><li><strong>Handler 对象的创建一定需要一个 Looper 对象</strong></li><li><strong>Looper 中一定有 MessageQueue</strong></li></ul><p>然后还有两个参数 callBack 和 async，callBack 是 Handler 内部的一个接口，内部只有一个 handleMessage() 方法，作用我们下面讲到再说。然后就是 async，这个就好理解了，就是决定是异步处理消息，还是同步处理消息，默认为同步 false;</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Looper-对象的创建"><a href="#Looper-对象的创建" class="headerlink" title="Looper 对象的创建"></a>Looper 对象的创建</h2><p>上一个步骤中我们知道，Handler 是直接从 Looper.myLooper() 中获得对象的，我们具体探讨一下。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token annotation punctuation">@Nullable</span> Looper <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很简单，是从一个集合中拿到的，这个 sThreadLocal，是 ThreadLocal 类的对象，代表着本地存储区（Thread Local Storage 简称 TLS），线程中的唯一 Looper 对象就存储在这里，每个线程都有一个本地存储区域，并且是私有的，线程之间不能相互访问。我们寻找一下是在哪个地方插入的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only one Looper may be created per thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到啦，由两个方法的权限访问修饰符可知，我们只能调用第一个，也就是说，第二个方法的参数永远是 true。再来看第二个方法，首先就是一个异常捕获，有的人可能已经很熟悉了，那就是一个线程中只能有一个 Looper。后面就是没有的话就 new 一个 Looper 对象，构造函数中都干了什么呢？</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">Looper</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">;</span>    mThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也很简单，初始化了 mQueue 也就是 MessageQueue，还有就是当前所在的线程 mThread。从权限访问修饰符可以看出，这是一个私有的构造方法，所以说，我们创建 Looper 方法只有 prepare() 方法啦。</p><h2 id="MessageQueue-对象的创建"><a href="#MessageQueue-对象的创建" class="headerlink" title="MessageQueue 对象的创建"></a>MessageQueue 对象的创建</h2><p>上述 Looper 对象的创建中，new 了一个 MessageQueue 方法，我们看看都干了什么。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">MessageQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mQuitAllowed <span class="token operator">=</span> quitAllowed<span class="token punctuation">;</span>    mPtr <span class="token operator">=</span> <span class="token function">nativeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也很简单，初始化了两个变量 mQuitAllowed 与 mPtr，第一个代表着消息队列是否可以退出，上面也说了，我们么的办法，只能是 true。第二个 mPtr，涉及到 Native 层的代码，在 native 层也做了一个初始化，具体深入了解可到此处<a href="http://gityuan.com/2015/12/27/handler-message-native/" target="_blank" rel="noopener">Android 消息机制 2-Handler(Native 层)</a></p><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>创建完 Handler，下一步就是发送 Message 了，去看看源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendEmptyMessageAtTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MessageQueue queue <span class="token operator">=</span> mQueue<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RuntimeException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" sendMessageAtTime() called with no mQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token string">"Looper"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又是好多发送消息的，不过他们最后都调用了 sendMessageAtTime 方法。第一个参数是要发送的消息，而第二个是一个绝对时间，也就是发送消息的时间。在做了一些判断之后，调用了 enqueueMessage 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>MessageQueue queue<span class="token punctuation">,</span> Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//消息获得发送该消息的 Handler 对象引用</span>    msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否同步属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAsynchronous<span class="token punctuation">)</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">.</span><span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在又做了一些 Message 的属性初始化后，调用了 queue 的 enqueueMessage 方法，而这个 queue 就是在 Looper 对象中获得的 MessageQueue 对象。下面是 MessageQueue 中的 enqueueMessage 方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 每一个 Message 必须有一个 target</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Message must have a target."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" This message is already in use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//正在退出时，回收 msg，加入到消息池</span>            msg<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>        Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mMessages 为当前消息队列的头结点</span>        <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//p 为 null(代表 MessageQueue 没有消息） 或者 msg 的触发时间是队列中最早的， 则进入该该分支</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>            needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将消息按时间顺序插入到 MessageQueue。一般地，不需要唤醒事件队列，除非</span>            <span class="token comment" spellcheck="true">//消息队头存在 barrier，并且同时 Message 是队列中最早的异步消息。</span>            needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Message prev<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结就是，MessageQueue 按照消息的触发时间插入队列，队头是最早要触发的消息。一个新的消息加入会根据触发时长从队头开始遍历。</p><h2 id="消息轮询"><a href="#消息轮询" class="headerlink" title="消息轮询"></a>消息轮询</h2><p>好了，消息已经发送给 MessageQueue 了，那么谁来管理这个 MessageQueue，将其中的消息正确的、准确的分发呢？那就是 Looper，准确的说是 Looper 中的 loop() 方法，<strong>这也是我们在子线程中创建 Handler 先要之前要 Looper.perpare()，之后要 Looper.loop() 的原因。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Looper me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取 TSL 存储区的 Looper 对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> MessageQueue queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取相对应的消息队列</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//消息主循环，除非线程退出，不然会一直循环，没有消息时会阻塞</span>            <span class="token comment" spellcheck="true">//获取下一个消息，没有消息时会阻塞，消息队列退出后会返回 null，则该循环也退出</span>            Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// might block</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 默认为 null，可通过 setMessageLogging() 方法来指定输出，用于 debug 功能</span>            <span class="token keyword">final</span> Printer logging <span class="token operator">=</span> me<span class="token punctuation">.</span>mLogging<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logging <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logging<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>> Dispatching to "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>                        msg<span class="token punctuation">.</span>callback <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取消息后根据 msg 的 target 即所属 Hnadler 分发消息</span>                <span class="token comment" spellcheck="true">//target 即 Handler 在上面发送消息代码解释中有说明</span>                msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                dispatchEnd <span class="token operator">=</span> needEndTime <span class="token operator">?</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>traceTag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>traceTag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logging <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logging<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">//分发完此消息，就回收此 Message 对象，留以复用</span>            msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些代码解释已经很清楚了，在在这里面主要是一个死循环轮询消息。由 MessageQueue 的 next() 方法取出消息，再由 Message 所属的 Handler 对象 dispatchMessage() 方法分发消息。首先我们看 next() 方法。</p><h2 id="获取消息"><a href="#获取消息" class="headerlink" title="获取消息"></a>获取消息</h2><pre class="line-numbers language-java"><code class="language-java">Message <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Return here if the message loop has already quit and been disposed.</span>        <span class="token comment" spellcheck="true">// This can happen if the application tries to restart a looper after quit</span>        <span class="token comment" spellcheck="true">// which is not supported.</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ptr <span class="token operator">=</span> mPtr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当消息循环已经退出，则直接返回</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> pendingIdleHandlerCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1 only during first iteration</span>        <span class="token keyword">int</span> nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞时长</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPollTimeoutMillis <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//阻塞函数，参数 nextPollTimeoutMillis 表示等待时长，或者消息队列被唤醒，都会返回</span>            <span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>                Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//当消息中的 Handler 为空时，在 MessageQueue 中寻找下一个异步消息</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Next message is not ready.  Set a timeout to wake up when it is ready.</span>                        <span class="token comment" spellcheck="true">//下一个消息还没有到时间发送，设置阻塞时长</span>                        nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 获得消息</span>                        mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        msg<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Returning message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//改变 message 状态</span>                        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No more messages.</span>                    <span class="token comment" spellcheck="true">//没有消息，设置阻塞时长</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果正在退出，返回空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nativePollOnce 是一个阻塞函数，参数 nextPollTimeoutMillis 则代表阻塞时长，当值为-1 时，则会一直阻塞下去。<br>所以说，next 函数在 MessageQ 有消息时，会获取消息并返回，在没有消息时，则会一直阻塞。</p><h2 id="分发消息"><a href="#分发消息" class="headerlink" title="分发消息"></a>分发消息</h2><p>获取完消息，就要到分发消息了，也就是消息轮询总结中的 dispatchMessage 函数，在 Handler 类中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的调用流程就是</p><ul><li>首先判断 Message 的 callback 是否存在，如果存在，就执行 handleCallback 函数，这个函数就一个简单的 message.callback.run() 方法调用。Message 中的 callback 实际上是一个 Runnable，所以就会执行自定义的 run 函数。这个的作用是在 Handler 的 post 消息上，其实 post 消息与 send 消息并没有太大的不用，只是通过 getPostMessage 方法将 Message 封装了一下，其实就是将自定义的 Runnable 传给 Message 的 callback，这样在分发消息的时候就是直接执行自定义的 Runnable 中的 run 函数。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span>  <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token function">getPostMessage</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Message <span class="token function">getPostMessage</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Message m <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  m<span class="token punctuation">.</span>callback <span class="token operator">=</span> r<span class="token punctuation">;</span>  <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>然后就是 Handler 类中有一个 Callback 接口，接口中只有一个 handleMessage() 函数。如果成员变量 mCallBack 存在，就会首先执行此接口中的函数。实际使用中我们可以实现此接口，并重写方法。然后通过 Handler 的构造方法传入。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>最后才是我们熟悉的重写 Handler 类中的 handleMessage 方法，这个方法如果在上面那种处理过后返回的是 true，那么就根本到不了这个函数。所以说上面两种处理方式都可以拦截消息。其中第一种是一定会拦截消息，第二种则由返回值确定。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>转了一圈，从 Handler 到 Looper 又到 MessageQ 最后又回到 Handler，整个消息机制也就差不多这样啦，当然 Message 在其中就是一个实体啦，可以协上数据一起传递消息。我也是根据这个顺序，一步一步的慢慢了解每个步骤的。</strong></p><p>最后，附上一张图吧，会更清晰一点<br><img src="https://user-gold-cdn.xitu.io/2019/6/6/16b2d634bf9ec289?w=902&h=550&f=png&s=261587" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第8期）---ANR出现的场景以及解决方案</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-8-qi-anr-chu-xian-de-chang-jing-yi-ji-jie-jue-fang-an/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-8-qi-anr-chu-xian-de-chang-jing-yi-ji-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><p><strong>ANR：</strong> application not response，应用程序没有响应。Android应用程序基于消息处理机制保证在发生输入、触摸等需要响应的事件之后，在规定的时间内没有得到有效的响应或者响应时间过长，都会发生ANR，弹出ANR对话框—等待应用或者退出应用。</p><p>Android中的响应性事件处理受到Activity Manager Service、Window Manager Service这两个系统服务的监视，所有与ANR相关的消息，都经过系统进程（system_service）的调度，然后分发给应用进程进行实际的消息处理。系统进程通过系统服务的监视，根据不同的情况限制不同的超时时长，一旦在限制的时间内得不到响应，就会调用AppNotRespondingDialog.show()显示ANR对话框。</p><p>实际上，Android的主线程，也就是用来绘制View的UI线程，是线程不安全的，所以就使用ANR原则对主线程进行限制，保证主线程在串行处理事件时保持流畅性，给用户良好的体验（比如UI的绘制工作必须在16ms内完成）。所以在主线程中的所有耗时操作（密集型cup操作、网络请求、大量IO等），都有可能发生ANR。</p><p>Android四大组件Activity、Service、BroadcastReceiver、ContentProvider都是运行在主线程中，对此定义不同的标准限制它们的响应时长：</p><ul><li>Service TimeOut：Service：前台Service（通知栏有显示）20s内、后台Service200s内</li><li>BroadcastQueue TimeOut：BroadcastReceiver中，前台广播10s，后台广播60s。</li><li>ContentProvider TimeOut：在publish中超过10s</li><li>InputDispatching TimeOut：键盘输入事件、触摸事件5s内得不到响应</li></ul><p><strong>ANR监测机制：</strong> 整体的一个大致流程就是—事件开始前进行计时-&gt;进行事件处理-&gt;事件处理完，限制时间没到，移除计时，系统正常进行。事件没处理完，限制时间已到，移除计时，弹出ANR对话框</p><p>发生事件处理超时的情况有两种：</p><ul><li>当前事件没有机会得到处理，主线程正在响应另外的时间，当前事件被阻塞</li><li>当前事件正在处理，但处理事件过长导致长时间得不到响应</li></ul><p><strong>ANR预防：</strong> 耗时操作在尽量子线程中操作—AsyncTask、intentService、HandlerThread，多线程操作避免死锁的出现以及快速的解决办法，还有就是UI层次的复杂绘制，尽量减少布局嵌套，如果Activity初始化需要一定的耗时，可以考虑马上显示Activity显示Dialog加载框异步加载数据。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第7期）---Android补间动画与属性动画的区别</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-7-qi-android-bu-jian-dong-hua-yu-shu-xing-dong-hua-de-qu-bie/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-7-qi-android-bu-jian-dong-hua-yu-shu-xing-dong-hua-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h1><p>补间动画是根据我们设置好的view起始形态与终止形态，通过插值器与duration（时长）自动计算出中间view的平滑变化而实现动画效果。</p><p>补间动画有TranslateAnimation（平移）、ScaleAnimation（缩放）、RotateAnimation（旋转）、AlphaAnimatio（渐变）四个类，这些只是很基本的四种动画效果，如果我们需要在此基础上更为复杂的动画效果，可以继承这四个类进行装饰。</p><p>一般情况下我们都是在xml文件中定义补间动画，属性设置大致有起始值、终止值、时长（duration）、插值（interpolator，即动画的变化速度，加速、减速、匀速、抛物线速度）四个属性，四种动画效果的标签—translate、scale、rotate、alpha。具体属性设置及意义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>平移<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>translate        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>水平方向、竖直方向初始的view位置<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>fromXDelta<span class="token operator">=</span><span class="token string">"0%"</span>        android<span class="token operator">:</span>fromYDelta<span class="token operator">=</span><span class="token string">"0%"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>水平方向、竖直方向终止点的view位置<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>toXDelta<span class="token operator">=</span><span class="token string">"100%"</span>        android<span class="token operator">:</span>toYDelta<span class="token operator">=</span><span class="token string">"100%"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动画持续时间<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>duration<span class="token operator">=</span><span class="token string">"@integer/animation_duration"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>缩放<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>scale        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>水平方向、竖直方向初始的view缩放大小<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>fromXScale<span class="token operator">=</span><span class="token string">"0.5"</span>        android<span class="token operator">:</span>fromYScale<span class="token operator">=</span><span class="token string">"0.5"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>水平方向、竖直方向终止点的view缩放大小<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>toXScale<span class="token operator">=</span><span class="token string">"1.0"</span>        android<span class="token operator">:</span>toYScale<span class="token operator">=</span><span class="token string">"1.0"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>指定缩放中心点的坐标<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>pivotX<span class="token operator">=</span><span class="token string">"50%"</span>        android<span class="token operator">:</span>pivotY<span class="token operator">=</span><span class="token string">"50%"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动画持续时间<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>duration<span class="token operator">=</span><span class="token string">"@integer/animation_duration"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>旋转<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>rotate        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>起始旋转角度<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>fromDegrees<span class="token operator">=</span><span class="token string">"0"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>终止旋转角度<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>toDegrees<span class="token operator">=</span><span class="token string">"1800"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>旋转中心点<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>pivotY<span class="token operator">=</span><span class="token string">"50%"</span>        android<span class="token operator">:</span>pivotX<span class="token operator">=</span><span class="token string">"50%"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动画持续时间<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>duration<span class="token operator">=</span><span class="token string">"@integer/animation_duration"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>渐变<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>alpha        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>起始透明度<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>fromAlpha<span class="token operator">=</span><span class="token string">"1"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>终止透明度<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>toAlpha<span class="token operator">=</span><span class="token string">"0.5"</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动画持续时间<span class="token operator">--</span><span class="token operator">></span>        android<span class="token operator">:</span>duration<span class="token operator">=</span><span class="token string">"@integer/animation_duration"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java代码设置</p><pre class="line-numbers language-java"><code class="language-java">Animation animation <span class="token operator">=</span> AnimationUtils<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>activity_open_enter<span class="token punctuation">)</span><span class="token punctuation">;</span>animation<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>imageView<span class="token punctuation">.</span><span class="token function">setAnimation</span><span class="token punctuation">(</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h1><p>属性动画更为强大。补间动画只能自定义两个关键帧在旋转、位移、缩放、透明度四个方面的变化，而属性动画可以定义任何属性的变化。另外，补间动画只能对UI组件执行动画，但属性动画几乎可以对任何对象执行动画（不管它是否在屏幕上显示）。</p><p>属性动画有三个关键的类—ValueAnimation、ObjectAnimation、AnimationSet</p><h2 id="ValueAnimation"><a href="#ValueAnimation" class="headerlink" title="ValueAnimation"></a>ValueAnimation</h2><p>属性动画主要的时间引擎，负责计算各个帧的属性值。它定义了属性动画绝大部分核心功能，包括计算各帧的属性值，负责处理更新事件、按属性类型值控制计算规则等。</p><p>ValueAnimation创建动画步骤：</p><ul><li>使用ValueAnimation的静态方法ofInt()、ofFloat、ofObject()创建ValueAnim实例。</li><li>通过setXxx()设置动画持续时间、插值方式、重复次数等</li><li>调用start方法启动动画</li><li>上面三个步骤仅仅是计算出了各个帧的属性值，我们需要注册AnimationUpdateListener监听器，在监听器中监听ValueAnimation计算出来的值的改变，应用到指定对象上</li></ul><pre class="line-numbers language-java"><code class="language-java">ValueAnimator valueAnimator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueAnimator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueAnimator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获得变化的属性值</span>                <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//对指定对象进行属性值更新操作</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般来说，ValueAnimation、本身并不显示任何动画，它更像是一个数值计算器。通过ofXxx方法指定计算类型，通过steXxx方法设置计算中值的变化方式，产生一段有规律的数字，让开发者自己为指定对象动态的设置属性。</p><h2 id="ObjectAnimation"><a href="#ObjectAnimation" class="headerlink" title="ObjectAnimation"></a>ObjectAnimation</h2><p>ObjectAnim类继承了ValueAnimation类，可以直接将ValueAnimation计算出来的值应用到指定对象的指定属性上。</p><pre class="line-numbers language-java"><code class="language-java">ObjectAnimator animator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>imageView<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ofFloat方法与ValueAnimation中不同的是第一个参数是执行动画的对象，第二个参数是需要操作的属性，后面是一个可变长数组，表示属性值的起始于终止值。</p><p>第二个参数需要操作的属性在第一个参数对象中需要有get和set方法。ObjectAnimation内部是通过反射机制获得set方法动态的设置对象属性。可以直接使用的的属性有：</p><ul><li>translationX、translationY：这两个属性作为一种增量来控制着View对象从它布局容器的左上角坐标开始的位置。</li><li>rotation、rotationX、rotationY：这三个属性控制着View对象围绕它的支点进行2D和3D的旋转。</li><li>scaleX和scaleY：这两个属性控制着View对象围绕它的支点进行2D缩放。</li><li>pivotX和pivotY：这两个属性控制着View对象的支点位置，围绕这个支点进行旋转和缩放变换处理。默认情况下，该支点的位置就是View对象的中心点。</li><li>alpha：它表示View对象的alpha透明度。</li><li>x、y：这是两个简单的实用的属性，它描述了View对象在它的容器中最终的位置。</li></ul><h2 id="AnimationSet"><a href="#AnimationSet" class="headerlink" title="AnimationSet"></a>AnimationSet</h2><p>那么多炫酷的动画，当然不可能只是靠单一一个ObjectAnimation来实现的，这就需要多个ObjectAnimation进行组合，就需要AnimationSet类了。</p><pre class="line-numbers language-java"><code class="language-java">AnimatorSet animatorSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator animator1 <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>imageView<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator animator2 <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>imageView<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator animator3 <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>imageView<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObjectAnimator animator4 <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>imageView<span class="token punctuation">,</span> <span class="token string">"translationX"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>animator1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>animator2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>animator3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>animator4<span class="token punctuation">)</span><span class="token punctuation">;</span>animatorSet<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animatorSet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AnimationSet的play方法表示播放当前动画，其余还有组合方法:</p><ul><li>after(Animator anim) ： 将现有动画插入到传入的动画之后执行。</li><li>after(long delay)：将现有的动画延迟指定的毫秒后执行。</li><li>before(Animator anim)：将现有的动画插入到传入的动画之前执行。</li><li>with(Animator anim)：将现有的动画和传入的动画同时执行。</li><li>playSequentially(Animator… items)：表示按顺序执行这些动画.</li><li>playTogether(Animator… items);表示这些动画一起执行.</li></ul><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul><li>属性动画在补间动画的基础上定义了更多高级的功能</li><li>补间动画只能对UI组件执行动画，但属性动画几乎可以对任何对象执行动画，不管它是否显示在屏幕上</li><li>最重要的一点：补间动画只是在视图层次进行了改变，对象的属性并没有改变。而属性动画是真正的改变了属性值，根据设置动态的属性值实现动画效果。一个很好的例子就是一个图片在采用补间动画进行平移后，点击平移后的图片是不会有点击事件发生，点击平移前的位置会有点击事件发生（虽然执行动画后这里看起来什么也没有）。而属性动画则会对新位置响应点击事件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第6期）---如何实现多线程中的同步</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-6-qi-ru-he-shi-xian-duo-xian-cheng-zhong-de-tong-bu/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-6-qi-ru-he-shi-xian-duo-xian-cheng-zhong-de-tong-bu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><p>在介绍多线程中的同步之前，我们先来了解下并发编程。</p><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="并发编程存在的意义"><a href="#并发编程存在的意义" class="headerlink" title="并发编程存在的意义"></a>并发编程存在的意义</h2><ul><li><strong>资源利用率</strong>：程序的进行，无非就是cpu对于一条条指令执行的操作。cpu对于指令进行处理的速度是非常快的，如果是串行的话，比如IO操作的速度是远远小于cpu操作的速度，这样cpu就会存在大量的空闲时间，浪费cpu资源。</li><li><strong>时间</strong>：有时多个任务之间并没有什么关联，在资源充足的情况下，他们完全可以并发的进行。串行的结果只能是延长完成总任务的时间，降低效率。</li><li><strong>公平性</strong>：同时申请需要进行的任务，随意的串行进行执行会打破任务之间的公平性。并发操作使任务可以同时进行，得到同样的资源，保证公平性。</li></ul><h2 id="并发编程的缺陷"><a href="#并发编程的缺陷" class="headerlink" title="并发编程的缺陷"></a>并发编程的缺陷</h2><ul><li><strong>安全性</strong>：并发编程的安全性缺陷是众所周知的。不同的工作线程对同一资源同时进行处理会产生脏数据。典型的例子就是银行转账问题，在同一时间A向B的账户、B向A的账户转账，两个工作线程同时对余额进行操作，必定会导致操作过后对不上账的情况。</li><li><strong>开销</strong>：在单个cpu的情况下，并发操作是通过cpu频繁的切换线程达到并发的目的，线程的切换涉及到寄存器的数据保存、更新等操作，需要一定的开销。在高并发的情况下，需要考虑到并发操作节省的资源与时间是否可以弥补线程切换间的开销。</li><li><strong>复杂性</strong>：单个线程用到的资源可以从线程对应的栈、寄存器以及进程中的内存中获取，在执行时也不会与其他线程产生交集。多线程编程，势必会涉及到线程间的通信、数据同步等问题，一整套的并发机制设计起来很复杂。</li></ul><h2 id="并发编程的三大要素"><a href="#并发编程的三大要素" class="headerlink" title="并发编程的三大要素"></a>并发编程的三大要素</h2><ul><li><p><strong>原子性</strong>：一个操作或者多个操作，要么全部执行，要么都不执行，执行过程中不可被任何因素打断。在java中对基本数据类型的赋值与读取是原子性操作。</p></li><li><p><strong>可见性</strong>：多个线程访问同一个变量时，一个线程改变了这个变量，其他线程都要对此值进行同步更新。</p></li><li><p><strong>有序性</strong>：即程序的执行顺序按照代码的先后顺序执行。这是因为处理器在执行程序时，为了优化程序执行效率，会对代码进行不同程度上的指令重排序，当然这种重排序不会改变程序最后运行的结果，因为不会对存在数据依赖的代码进行重排序。也就是下一行代码需要用到上一行代码的数据。在单线程中指令重排序没有任何问题，但是在多线程中就会出现问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线程1:</span>context <span class="token operator">=</span> <span class="token function">loadContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//语句1</span>inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//语句2</span><span class="token comment" spellcheck="true">//线程2:</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>inited <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">doSomethingwithconfig</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程1中语句1和语句2没有数据依懒性，inited仅是一个标记变量，所以这两个语句可能发生指令重排序。当语句2在语句1之前执行时，这是恰好线程2启动，标记变量init为true则线程2认为初始化已经完成，而此时语句1并没有执行，就会造成问题。</p></li></ul><p><strong>所以说，并发编程中保证原子性、可见性、有序性，是同步的基本要素</strong></p><h1 id="同步操作"><a href="#同步操作" class="headerlink" title="同步操作"></a>同步操作</h1><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>volatile是java的一个关键字，一旦一个共享变量（类的成员变量、静态变量）被volatile关键字修饰，就具备有两层含义</p><ul><li>当一个线程对此变量的值进行了更新操作，那么对其他线程是可见的。这里的更新操作，指写入工作内存。</li><li>禁止指令重排序。具体为volatile变量之前的代码不会被指令重排序到此变量之后，在程序执行到volatile变量时，之前的代码一定已经全部执行，之后的代码一定还没有执行。</li></ul><p>这就保证了可见性与有序性，但是volatile并不保证可见性。看下面一段代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> test <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Main mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        mm<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//所有线程执行完毕</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最后的数据为"</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>test<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后你会发现，每一次的结果都小于100000。这是因为<code>test++</code>这个操作，它不是原子性的，与test本身这个变量无关。</p><p><code>test++</code> 经过三个原子操作，读取test变量值、test变量进行加一操作、将操作后的变量值写入工作内存。当线程1执行到前两步时，线程2开始读取test变量值，当线程1三个步骤执行完毕时，虽然此时test的值会立马更新到线程2，但是线程2已经在此之前进行了读取变量值的操作，所以实际上两个线程只让test加了一次。</p><p>所以说，volatile只进行一些简单的同步操作，比如上面提到的标记变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> inited <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程1:</span>context <span class="token operator">=</span> <span class="token function">loadContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//语句1</span>inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//语句2</span> <span class="token comment" spellcheck="true">//线程2:</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>inited <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">doSomethingwithconfig</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并发编程中的单例模式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个虽然有synchronized关键字来保证单线程访问，但是这里面其实是<code>instance=new Singleton()</code>指令重排序的问题，这一步有三个原子性操作</p><ul><li>为instance分配内存</li><li>调用构造参数初始化成员变量</li><li>将instance对象指向分配好的内存空间<br>其中第二步与第三步是会发生指令重排序的，这两部之间并没有数据依赖。如果第三步在第二步之前执行（此时instance已经非空了），此时另一个线程发现instance非null，就直接拿去使用了，这时第二步初始化变量操作还没有执行，就会发生错误。</li></ul><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>synchronized同样是java中的一个关键字。它通过锁机制实现同步,要执行代码，则必须要获得锁，只有获得锁对象的线程才能执行锁住的代码，其他线程没有获得锁只能阻塞。锁有<strong>对象锁</strong>和<strong>类锁</strong>。同步有两种表现形式：<strong>同步代码块</strong>和<strong>同步方法</strong></p><ul><li>对象锁：仅针对该类的一个实例在不同线程中的应用，如果是同一个类的多个对象在不同的线程中，则不会有影响。</li><li>类锁：针对该类的所有实例。<h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3></li><li><em>对象锁*</em><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><em>类锁*</em><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><em>对象锁。这里的o代表任意一个object对象或者数组，谁拥有这个对象谁就可以执行该程序块代码*</em><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">synchronized</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3></li><li><em>类锁*</em><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><em>对象锁*</em><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock是一个类，它的同步方法与synchronized大致相同。</p><p>基本用法</p><pre class="line-numbers language-java"><code class="language-java">ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//参数默认false，不公平锁</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果被其它资源锁定，会在此等待锁释放，达到暂停的效果</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//操作</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放锁</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ReentrantLock通过lock方法与unlock方法显式的获取锁与释放锁，与synchronized隐式的获取锁不同。当线程执行到lock.lock()方法时，会尝试获取锁，获取到锁则执行下去，获取不到则会阻塞。unlock()方法则会释放当前线程所持有的锁，如果没有锁可以释放可能会发生异常。</p><p>显式的获取锁虽然比隐式的自动获取锁麻烦了不少，但多了许多可控制的情况。我们可以中断获取锁、延迟获取锁等一些操作。</p><p><strong>公平锁</strong></p><p>当许多线程在队列中等待锁时，cpu会随机挑选一个线程获得锁。这样就会出现饥饿现象，即优先级低的线程不断被优先级高的线程抢占锁资源，以至于很长时间获得不到锁，这就是不公平锁。RenntrantLock可以使用公平锁，即cpu调度按照线程先后等待的顺序获得锁，避免饥饿现象。但是执行效率会比较低，因为需要维护一个有序队列。synchronized是不公平锁。</p><pre class="line-numbers language-java"><code class="language-java">ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过在创建对象时传入boolean对象表示使用什么锁，默认为false不公平锁。</p><h2 id="synchronized与reentrantLock比较"><a href="#synchronized与reentrantLock比较" class="headerlink" title="synchronized与reentrantLock比较"></a>synchronized与reentrantLock比较</h2><ul><li>ReentrantLock实现Lock接口，是一个类，synchronized是java关键字，是内置的语言实现</li><li>synchron在发生异常时，会自动释放锁，几乎不会造成死锁。ReentrantLock需要手动的释放锁（unLock），所以在使用时应在finally代码块中释放锁。</li><li>ReentrantLock可以中断锁的获取，即获取不到锁时继续执行下去，而synchronized却不可以，会一直阻塞。</li><li>通过lock可以知道有没有成功获取锁，synchronized不可以</li></ul><p>可以看出，ReentrantLock实现了许多更高级的功能，不过却多了点复杂性。在性能上来说，竞争不激烈时，两者的性能是差不多的，不过当竞争激烈时，即有大量线程等待获取锁，ReentrantLock的性能要更好一些，具体的使用看情况进行。</p><p>jdk1.6以前synchronized的性能是很差的，jdk1.6以后对synchronized的性能优化了不少，和ReentrantLock性能差不了多少。官方也表示更支持synchronized，以后还有优化的余地，所以在都能符合需求的情况下，推荐使用synchronized。</p><h2 id="CAS原子操作"><a href="#CAS原子操作" class="headerlink" title="CAS原子操作"></a>CAS原子操作</h2><p><strong>乐观锁与悲观锁：</strong> </p><p>cpu调度线程，通过将时间片分配给不同的线程进行调度。时间片的切换也就是线程的切换，需要清除寄存器、缓存数据，切换后加载线程需要的数据，需要耗费一定的时间。线程阻塞后，通过notify、notifyAll唤醒。假如线程1在尝试获取锁，获取失败，挂起。这时锁被释放，线程1被唤醒，尝试获取锁，结果又被其他线程抢占锁，线程1继续挂起，获取锁的线程只占用锁很短的时间，释放锁，线程1又被唤醒。。。就这样，线程1反复的挂起、唤醒，线程1认为其他线程获取锁就一定会对锁内的资源进行更新等操作，所以不断等待，这就是悲观锁。synchronized这种独占锁就是悲观锁。</p><p>乐观锁并不加锁，首先会认为在自己修改资源之前其他线程不会对资源进行更新等操作，它会尝试用锁内资源进行自己的操作，如果修改后的数据发生冲突，就会放弃之前的操作。就这样一直循环，知道操作成功。</p><p>CAS就是一种乐观锁的概念，内有三个操作数—内存原值（C）、预期旧值（A）、新值（B），当且只当内存原值与预期旧值的结果一样时，才更新新值。不然就是不断地循环尝试。Java中java.util.concurrent.atomic包相关类就是 CAS的实现.</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>AtomicBoolean</td><td>可以用原子方式更新的 boolean 值。</td></tr><tr><td>AtomicInteger</td><td>可以用原子方式更新的 int 值。</td></tr><tr><td>AtomicIntegerArray</td><td>可以用原子方式更新其元素的 int 数组。</td></tr><tr><td>AtomicIntegerFieldUpdater</td><td>基于反射的实用工具，可以对指定类的指定 volatile int 字段进行原子更新。</td></tr><tr><td>AtomicLong</td><td>可以用原子方式更新的 long 值。</td></tr><tr><td>AtomicLongArray</td><td>可以用原子方式更新其元素的 long 数组。</td></tr><tr><td>AtomicLongFieldUpdater</td><td>基于反射的实用工具，可以对指定类的指定 volatile long 字段进行原子更新。</td></tr><tr><td>AtomicMarkableReference</td><td>AtomicMarkableReference 维护带有标记位的对象引用，可以原子方式对其进行更新。</td></tr><tr><td>AtomicReference</td><td>可以用原子方式更新的对象引用。</td></tr><tr><td>AtomicReferenceArray</td><td>可以用原子方式更新其元素的对象引用数组。</td></tr><tr><td>AtomicReferenceFieldUpdater</td><td>基于反射的实用工具，可以对指定类的指定 volatile 字段进行原子更新。</td></tr><tr><td>AtomicStampedReference    AtomicStampedReference</td><td>维护带有整数“标志”的对象引用，可以用原子方式对其进行更新。</td></tr></tbody></table><p>这种不需要锁的非阻塞算法，在性能上是要优于阻塞算法。一般使用如下,实现自增<code>i++</code>的同步操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> AtomicInteger i<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CAS的问题</strong></p><ul><li>ABA问题。一个值从A变为B又变为A，它的值实际上是变化了，可是CAS却识别不出来。这种问题解决思路就是在变量前面加上版本号，即1A-2B-3A。从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</li><li>CAS操作如果长时间不成功，会给cpu带来巨大的开销。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第5期）---哪些情况下会导致OOM问题</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-5-qi-na-xie-qing-kuang-xia-hui-dao-zhi-oom-wen-ti/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-5-qi-na-xie-qing-kuang-xia-hui-dao-zhi-oom-wen-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="什么是OOM"><a href="#什么是OOM" class="headerlink" title="什么是OOM"></a>什么是OOM</h1><p>“OOM”也就是“out of memory”，意思是内存用完了。也就是说，当你去申请内存的时候，你需要的内存过大，app剩下的空余内存已经不够你使用，如果你没有捕获这个异常，系统就没办法了，会直接崩溃并抛出OOM异常。</p><p>系统分配给每一个app运行的内存空间是有限的，所以作为一名Android开发者，我们一定要谨慎小心的使用内存。</p><h1 id="OOM的类型"><a href="#OOM的类型" class="headerlink" title="OOM的类型"></a>OOM的类型</h1><p>首先OOM的原因就是app进程可用内存不足，有两种情况</p><ul><li>内存申请的速度大于gc释放内存的速度</li><li>内存出现泄漏，gc无法回收泄露的内存，导致可用内存越来越少</li></ul><p>第一种情况又会有两种不同的类型</p><ul><li>一次性需要的内存过大，可用内存不足。常见的是使用图片资源时加载为bitmap存储到内存，图片分辨率越高，需要的内存就越大，就可能造成OOM。</li><li>频繁的创建内存占用小的对象，导致内存碎片，这种叫内存抖动。虽然整体上还有内存可分配，但是这些内存空间并不连续，无法满足需求，导致OOM。常见的有ListView中contentView的创建、频繁使用String进行字符串的拼接、onDraw方法里对象的频繁创建。这一类问题要解决基本的方法就是复用已创建的对象</li></ul><p>第二种情况就是内存泄漏，内存泄漏与OOM的关系就是量变到质变的过程，内存泄漏必定会导致可用内存的减少，大量的内存泄漏就会导致OOM问题。关于内存泄漏的具体例子在<a href="https://juejin.im/post/5ce4b2736fb9a07ebf4b447d" target="_blank" rel="noopener">第3期</a>已经很详细的探讨过，这里就不再赘述。</p><h1 id="OOM的预防"><a href="#OOM的预防" class="headerlink" title="OOM的预防"></a>OOM的预防</h1><p>这里总结几点，无非是两个方面：</p><ul><li>提高系统分配的可用内存。假如app确实需要很大的内存空间，那么可以再manifest文件中设置<code>largeHeap=&quot;true&quot;</code>增加内存的的申请量</li><li>减少app的内存使用<ul><li>ImageView使用合适的尺寸，多图显示缩略图，点击查看大图</li><li>ListView使用ViewHolder复用contentView。不过现在大都用RecycleView，强制配合ViewHolder使用</li><li>减少bitmap对象内存的占用，可用Lru缓存、三级缓存、合适的编码等</li><li>onDraw等频繁调用的方法中避免创建对象</li><li>优化布局，少用LinerLayout多用RelativeLayout</li><li>字符串拼接问题尽量使用StringBuilder而不是String的+</li></ul></li></ul><p>在内存泄漏方面</p><ul><li>使用静态内部类</li><li>静态类引用使用Application的Context而不是Activity的Context</li><li>类似广播、监听器等记得取消注册</li><li>游标、文件等资源使用完毕一定要关闭</li><li>静态集合使用完毕记得清空</li><li>根据不同场景，善用软引用、弱引用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第4期）---launchMode的应用场景</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-4-qi-launchmode-de-ying-yong-chang-jing/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-4-qi-launchmode-de-ying-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="launchMode简介"><a href="#launchMode简介" class="headerlink" title="launchMode简介"></a>launchMode简介</h1><h2 id="what（是什么）"><a href="#what（是什么）" class="headerlink" title="what（是什么）"></a>what（是什么）</h2><p>是Activity的一种配置属性，表示Activity由哪种方式启动</p><h2 id="how（怎么用）"><a href="#how（怎么用）" class="headerlink" title="how（怎么用）"></a>how（怎么用）</h2><p>有两种配置方式：</p><ul><li>在manifest清单文件中配置默认启动属性。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/5/23/16ae29b1f67973bd" alt="manifest配置launchMode"></p><ul><li>在java代码中，启动Activity时指定启动方式，通过inent.addFlags()方法，这里面常用的有四种。<ul><li>Intent.FLAG_ACTIVITY_NEW_TASK</li><li>Intent.FLAG_ACTIVITY_SINGLE_TOP</li><li>Intent.FLAG_ACTIVITY_CLEAR_TOP</li><li>Intent.FLAG_ACTIVITY_CLEAN_TASK</li></ul></li></ul><p>具体的使用以及各种搭配使用说明可以看这个<a href="https://wangkuiwu.github.io/2014/06/26/IntentFlag/" target="_blank" rel="noopener">Android 之Activity启动模式(二)之 Intent的Flag属性</a>,写的很详细。</p><h2 id="why（为什么需要）"><a href="#why（为什么需要）" class="headerlink" title="why（为什么需要）"></a>why（为什么需要）</h2><p>在不同的场景考虑到不同形式的Activity实例的复用，选择不同的加载方式。</p><h1 id="四种launchMode启动模式"><a href="#四种launchMode启动模式" class="headerlink" title="四种launchMode启动模式"></a>四种launchMode启动模式</h1><p>介绍启动模式前，我们先来了解下Android的Activity管理机制。</p><p>Android采用Task来管理多个Activity，当我们启动一个应用时，Android就会为之创建一个Task，然后就是启动这个应用程序的入口Activity，并将实例放入Task。</p><p>Android并没有为Task提供任何的API，我们无法真正的访问Task，只有一个getTaskId方法获得所在Task的Id。Task通过栈的方式管理Activity实例，包括先进后出、入栈出栈方式都是一样的。</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/23/16ae2e91b2965f2f?w=229&h=220&f=png&s=8205" alt="Task栈"></p><h2 id="standard模式"><a href="#standard模式" class="headerlink" title="standard模式"></a>standard模式</h2><p>默认的启动模式。每次启动一个Activity，都会创建一个新的Activity实例放在Task栈顶。这个Task栈是启动新的Activity的Activity所在的Task栈。那么这时候就会有特殊的情况，如果是service或者Application启动的Activity，并没有Task栈，这时就需要我们通过addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)指定标记，创建一个新的Task。</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/23/16ae305c565a65c8?w=608&h=353&f=png&s=16078" alt="standard示例"></p><p>app的大多数Activity皆采用这种启动模式。作为开发者，我们考虑到的就是用户在操作每个页面后，即使之间有重复的界面，按回退键也可以按照刚刚操作的顺序回退。</p><h2 id="singleTop模式"><a href="#singleTop模式" class="headerlink" title="singleTop模式"></a>singleTop模式</h2><p>这种模式存在两种情况：</p><ul><li>Task栈顶不是要启动的Activity实例，这时和standard模式没有区别</li><li>Task栈顶是要启动的Activity实例，那么就会复用这个实例，并且回调该Activity的onNewIntent方法。由于不会创建Activity实例，所以不会回调其他方法。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/5/23/16ae2fc329265d60?w=461&h=349&f=png&s=12496" alt="singleTop"></p><p>一般应用于通知详情页或者聊天界面，即通过点击通知栏消息进入Activity。可以避免有多次通知消息通过点击而产生较多Activity实例。增强Activity的复用性。</p><h2 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h2><p>这种模式有三种情况。</p><ul><li>Task栈中不存在要启动的Activity实例，这时和standard模式没有任何区别</li><li>Task栈中存在要启动的Activity实例，且此实例在栈顶，这时和singleTop模式没有区别</li><li>Task栈中存在要启动的Activity实例，且此实例不在栈顶。这时会移除此实例上的所有Activity实例，使此实例置于Task栈顶，并复用此实例，回调onNewIntent方法</li></ul><p>也就是说这是一种栈内的单例模式。这种模式下还可以通过manifest文件中的taskAffinity属性来指定要加载的Task栈。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>activity     android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".activitys.MainActivity"</span>    android<span class="token operator">:</span>launchMode<span class="token operator">=</span><span class="token string">"singleTask"</span>    android<span class="token operator">:</span>taskAffinity<span class="token operator">=</span><span class="token string">"com.gl.task"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于taskAffinity的值</strong>：每个Activity都有taskAffinity属性，这个属性指出了它希望进入的Task。如果一个Activity没有显式的指明该Activity的taskAffinity，那么它的这个属性就等于Application指明的taskAffinity，如果Application也没有指明，那么该taskAffinity的值就等于包名。</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/23/16ae303f19ccfd55?w=458&h=347&f=png&s=13963" alt="singleTask示例"><br><img src="https://user-gold-cdn.xitu.io/2019/5/23/16ae312bea9b3843?w=588&h=345&f=png&s=16607" alt></p><p>这种模式一般应用于app的主页，在退出应用程序的时候不需要退出其他的Activity，因为主页一般置于Task栈底部。或者该页面可能会被其他应用程序唤醒，比如浏览器首页。</p><h2 id="singleInstance模式"><a href="#singleInstance模式" class="headerlink" title="singleInstance模式"></a>singleInstance模式</h2><p>这种模式算是一种全局的单例模式，即只要有任何一个栈存在此Activity实例，就会复用此实例，回调onNewIntent方法。如果此实例不存在，那么就会创建新的Task栈，并放入Activity实例。</p><p>也就是说，这种模式下的Activity实例只有两种形式。</p><ul><li>不存在此实例</li><li>存在此实例，且只在一个Task栈中并且该Task中只有该实例</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/5/23/16ae31bf03dd8685" alt="singleInstance实例"></p><p>这种模式一般应用于闹钟响铃界面、拨打接听电话界面等系统界面，确保此Activity实例只能存在一个。<br>常应用于独立栈操作的应用，如闹钟的提醒页面，当你在A应用中看视频时，闹钟响了，你点击闹钟提醒通知后进入提醒详情页面，然后点击返回就再次回到A的视频页面，这样就不会过多干扰到用户先前的操作了。</p><p><strong>另外启动其他应用程序中的Activity的操作，在5.0之前新启动的Activity实例会放入启动的Intent所在的Task栈内，虽然他们并不属于同一应用程序。这好像并不怎么合理，所以在5.0后会创建一个新的Task栈存放外部应用程序的Activity实例</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第3期）---一般什么情况下会导致内存泄漏问题</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-3-qi-yi-ban-shi-me-qing-kuang-xia-hui-dao-zhi-nei-cun-xie-lou-wen-ti/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-3-qi-yi-ban-shi-me-qing-kuang-xia-hui-dao-zhi-nei-cun-xie-lou-wen-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>当本应该被释放或无用的对象，因为被其他存活的对象持有其引用，导致该对象不能被垃圾回收器回收，一直占用着内存，使程序运行变得缓慢甚至崩溃。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>为什么被其他存活的对象持有其引用，就不能被回收？这个就需要了解java的垃圾回收机制。</p><p><strong>java垃圾回收机制</strong></p><p>什么样的对象会被认为需要回收呢？我们现在将每一个对象看作有向图的结点，而对象之间的引用关系则是有向图的边。那么一定会有一个起始结点对象，如果这个对象是</p><ul><li>方法区的类静态属性引用的对象</li><li>方法区中的常量引用的对象</li><li>本地方法栈中的native方法引用的对象</li><li>虚拟机栈（栈帧中的本地变量表（局部变量表））所引用的对象</li></ul><p>那么由此对象可以在有向图上遍历到的所有对象都不会被回收。反之，就会被认为是要回收的对象。</p><p>抽象的来说，一个程序中会存在许多这样的有向图，如果一个对象同时被两个存在起始结点对象的有向图所引用。当一个有向图完成使命，需要被销毁，但另一个有向图的生命周期还没有结束。那么这个本应该无用的对象，却不能被垃圾回收器回收，只有当另一个有向图生命周期结束，才会被回收。</p><p>所以，就是我们常说的生命周期不同的两个对象间有引用关系，生命周期短的可能会造成内存泄漏，持续的时间取决于生命周期长的对象。如果这个对象是静态变量，那么将会持续到整个程序运行结束。</p><h1 id="Android内存泄漏情况"><a href="#Android内存泄漏情况" class="headerlink" title="Android内存泄漏情况"></a>Android内存泄漏情况</h1><h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><p>一般的集合类并不会造成内存泄漏，但是如果是全局性的集合类，如果不注意在使用完毕后进行remove操作，就极有可能造成内存泄露。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>这里的单例模式是指创建时需要传入Context作为参数。比如我们常写的下面这个代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Manager instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context context<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Manager</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Manager <span class="token function">getInstance</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键就在于这个Context，如果这个Context是Activity的Content，那么显然Activity的生命周期和单例模式的对象的生命周期是不一样的，传入Content的Activity使用完毕需要被回收时，是无法被垃圾回收器回收的。</p><p>显而易见的，当这个Context是Application的时，就不存在内存泄漏的问题。因为单例模式的对象与Application的生命周期都是整个应用的生命周期，不会有任何问题。</p><p>所以，我们可以改为这样写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Manager instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> Context context<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Manager</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Manager <span class="token function">getInstance</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然了，Application的Context也不是能随便用的。如果是要启动一个Activity，Application需要创建一个新的Task任务栈。而如果是创建一个Dialog，则只有Activity的context才可以。</p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>对于匿名内部类，在Android中典型的例子就是Handler了吧。这个我在第一期—<a href="https://juejin.im/post/5ce286496fb9a07edd29e461" target="_blank" rel="noopener">自定义Handler如何有效保证内存泄漏问题</a>已经说得很明白了。主要就是匿名内部类持有外部类的引用，匿名内部类的一些操作使得该内部类对象的生命周期和外部类的生命周期不相同，造成内存泄漏。</p><h2 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h2><p>在开发中，我们为了程序的高效以及资源重复利用，我们可能会经常写出这样的代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Resource resource <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resource <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Resource</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做虽然有效的避免了资源的重复创建，每次在Activity启动时快速的使用这些资源，但却会造成内存泄漏。因为非静态内部类也默认会持有外部类的引用。而由于这个非静态内部类的静态实例，其生命周期会和整个应用程序一样长，所以会造成内存泄露。</p><p>解决办法就是将该内部类设为静态内部类，或者把这个内部类抽取出来封装成一个单例模式。</p><h2 id="资源未关闭"><a href="#资源未关闭" class="headerlink" title="资源未关闭"></a>资源未关闭</h2><p>在我们使用BroadcastReceiver、File、Course、Stream、ContentObserver等资源或者一些框架eventbus等明确表示需要Register与unRegister时，都应该在Activity被销毁时关闭或者注销，否则这些资源将不会被回收。</p><h2 id="不良代码造成的压力"><a href="#不良代码造成的压力" class="headerlink" title="不良代码造成的压力"></a>不良代码造成的压力</h2><p>有时也并不是不能及时回收的对象造成的内存泄漏，而是有些代码没有及时有效的释放不需要使用的内存，或者是没有对于现有资源没有有效利用而频繁的申请新的内存，造成内存的巨大压力。</p><p>比如ListView中的ContentView，不使用ViewHolder有效的复用View而频繁的创建新的View，造成内存压力。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第2期）---Activity 与 Fragment 之间常见的几种通信方式？</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-2-qi-activity-yu-fragment-zhi-jian-chang-jian-de-ji-chong-tong-xin-fang-shi/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-2-qi-activity-yu-fragment-zhi-jian-chang-jian-de-ji-chong-tong-xin-fang-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>如果是在建立Fragment时需要Activity中的一些数据作为初始化，那么可以通过Activity中的setArguments(bundle)方法传递参数，在Fragment中通过getArguments获得Bundle对象来解析参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_register<span class="token punctuation">)</span><span class="token punctuation">;</span>        Fragment firstFragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FirstFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bundle bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//显示Fragment</span>        FragmentManager manager <span class="token operator">=</span> <span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FragmentTransaction transaction <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fragment<span class="token punctuation">,</span> firstFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>firstFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span>                             Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Inflate the layout for this fragment</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_first<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bundle bundle <span class="token operator">=</span> <span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据传递、事件监听"><a href="#数据传递、事件监听" class="headerlink" title="数据传递、事件监听"></a>数据传递、事件监听</h1><p>如果是创建后需要进行通信，那可以通过接口回调、广播、eventbus来进行。这些都可以是双向的，只是看你怎么设置。以下例子皆监听Fragment中的事件。</p><h3 id="接口回调"><a href="#接口回调" class="headerlink" title="接口回调"></a>接口回调</h3><p>在Fragment中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OnFragmentInteractionListener mListener<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button button<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span>                             Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Inflate the layout for this fragment</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_first<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bt_fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> mListener<span class="token punctuation">.</span><span class="token function">onFragmentInteraction</span><span class="token punctuation">(</span><span class="token string">"接口发送消息啦"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAttach</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定Activity</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">OnFragmentInteractionListener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mListener <span class="token operator">=</span> <span class="token punctuation">(</span>OnFragmentInteractionListener<span class="token punctuation">)</span> context<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">" must implement OnFragmentInteractionListener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//解绑activity时设为null</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mListener <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自定义一个接口</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnFragmentInteractionListener</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onFragmentInteraction</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Activity中实现OnFragmentInteractionListener接口重写onFragmentInteraction方法就可以了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">implements</span> <span class="token class-name">FirstFragment<span class="token punctuation">.</span>OnFragmentInteractionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFragmentInteraction</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"接口收到通知啦"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><p>在Activity中注册广播</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">implements</span> <span class="token class-name">FirstFragment<span class="token punctuation">.</span>OnFragmentInteractionListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理事件</span>    <span class="token keyword">private</span> BroadcastReceiver receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String action <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> BROADCAST_ACTION<span class="token operator">:</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"收到通知啦"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_register<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册广播</span>        IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"com.goldenhamster.myboradcastreceiver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记得取消注册</span>        <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Fragment中发送广播</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button button<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span>                             Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Inflate the layout for this fragment</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_first<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bt_fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.goldenhamster.myboradcastreceiver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EventBus框架"><a href="#EventBus框架" class="headerlink" title="EventBus框架"></a>EventBus框架</h3><p>设置信息类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mes<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EventUtil</span><span class="token punctuation">(</span>String mes<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mes <span class="token operator">=</span> mes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Activity中注册监听EventBus</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">BaseActivity</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用注解标记事件处理方法</span>    <span class="token annotation punctuation">@Subscribe</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>EventUtil event<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"收到通知啦"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Fragment中发送消息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button button<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span>                             Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Inflate the layout for this fragment</span>        View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fragment_first<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>bt_fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>v <span class="token operator">-</span><span class="token operator">></span> EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventUtil</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一道面试题（第1期）---自定义handler如何有效保证内存泄漏问题</title>
      <link href="/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-1-qi-zi-ding-yi-handler-ru-he-you-xiao-bao-zheng-nei-cun-xie-lou-wen-ti/"/>
      <url>/2020/03/31/mei-ri-yi-dao-mian-shi-ti-di-1-qi-zi-ding-yi-handler-ru-he-you-xiao-bao-zheng-nei-cun-xie-lou-wen-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>零零碎碎的东西总是记不长久，仅仅学习别人的文章也只是他人咀嚼后留下的残渣。无意中发现了这个<a href="https://github.com/Moosphan/Android-Daily-Interview" target="_blank" rel="noopener">每日一道面试题</a>，想了想如果只是简单地去思考，那么不仅会收效甚微，甚至难一点的题目自己可能都懒得去想，坚持不下来。所以不如把每一次的思考、理解以及别人的见解记录下来。不仅加深自己的理解，更要激励自己坚持下去。</p></blockquote><h1 id="handler作用"><a href="#handler作用" class="headerlink" title="handler作用"></a>handler作用</h1><p>SDK文档是这么说的。</p><blockquote><p>There are two main uses for a Handler: (1) to schedule messages and runnables to be executed as some point in the future; and (2) to enqueue an action to be performed on a different thread than your own.</p></blockquote><p>我们一般就是用来更新UI线程的。具体点就是在子线程进行耗时操作，比如获取网络图片，然后需要在主线程更新图片，就需要handler+Message+Loop+MessageQueue来帮忙啦。</p><p>但是如果你直接创建一个handler对象，然后重写内部handlerMessage方法，那么AS一定会提醒你会有内存泄漏的可能。</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/20/16ad510ed440963e?w=541&h=164&f=png&s=14342" alt="Handler"></p><h1 id="为什么会造成内存泄漏"><a href="#为什么会造成内存泄漏" class="headerlink" title="为什么会造成内存泄漏"></a>为什么会造成内存泄漏</h1><blockquote><p>Android内存泄漏：需要被GC回收的对象因为被其他存活的对象所持有引用，而导致GC不能回收此对象。那么这块内存就会在程序运行期间长期被占据，造成系统内存的浪费，使系统运行缓慢甚至崩溃。</p></blockquote><p>那么handler什么时候会造成内存泄漏呢？</p><p><strong>发送延迟消息</strong></p><p>众所周知，匿名内部类持有外部类的引用，那么handler对象就会持有activity对象的引用。handler发送message到MessageQueue，message持有handler的引用，而MessageQueue会持有message的引用，而MessageQueue是属于TLS（ThreadLocalStorage）线程,是与Activity不同的生命周期。</p><p>所以当Activity的生命周期结束后，而MessageQueue中还存在未处理的消息，那么上面一连串的引用关系就不允许Activity的对象被回收，就造成了内存泄漏。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>知道了内存泄漏是由引用链造成的，那么解决方法也就是破坏上面的引用链。</p><p>首先是引用的类型，有强引用、软引用、弱引用、虚引用，上面的引用链都是强引用。</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/20/16ad535316620e44?w=644&h=546&f=png&s=201549" alt="引用"></p><p>所以第一种方法，自定义静态内部类，如果想使用外部类的方法，那就通过弱引用的方法引入Activity对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myHandleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span><span class="token punctuation">{</span>        WeakReference<span class="token operator">&lt;</span>BaseActivity<span class="token operator">></span> mActivityReference<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyHandler</span><span class="token punctuation">(</span>BaseActivity activity<span class="token punctuation">)</span><span class="token punctuation">{</span>            mActivityReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BaseActivity activity <span class="token operator">=</span> mActivityReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>activity <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                activity<span class="token punctuation">.</span><span class="token function">myHandleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以自定义在BaseActivity中，在其他Activity中创建Myahndler对象，通过重写myHandleMessage方法进行消息处理。</p><p>这种方法就是处理了Activity与Handler之间的引用，这种引用可以再GC时被回收。</p><p>第二种，就是处理后面的引用。既然是Activity要被回收时还有未被处理的消息，那么在Activity要被回收时清除消息就可以了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit源码分析</title>
      <link href="/2020/03/31/retrofit-yuan-ma-fen-xi/"/>
      <url>/2020/03/31/retrofit-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在学习了<a href="http://stay4it.com/course/22" target="_blank" rel="noopener">Retrofit分析-漂亮的解耦套路（视频版）</a>后，自己又仔细的钻研了一下Retrofit的源码，也大致清楚了Retrofit进行网络请求的步骤。好记性不如烂笔头，以文章的形式将对于Retrofit的思考记录下来，也加深理解。（如有错误，请不吝赐教）</p><h2 id="分析源码的一般姿势"><a href="#分析源码的一般姿势" class="headerlink" title="分析源码的一般姿势"></a>分析源码的一般姿势</h2><p>首先我们聊一下对于一个优秀的libary，应该怎样一步一步地分析它。在上面的视频中，介绍了一个很好的方法。分为三个阶段：</p><ul><li><strong>what：</strong> 这个框架是用来干什么的，暴露给用户的API都是用来干嘛的。</li><li><strong>how：</strong> 这个API内部是怎样实现的，整个框架正常调用时内部是一个怎样的流程。</li><li><strong>why：</strong> 为什么要这样实现，有什么好处，可不可以有其他的实现，与原来的实现相比怎么样。</li></ul><p>通过了解、深入、思考，将整个框架一层一层地剖析出来，由浅入深，最后从全局再看这个框架，或许我们会不自禁的赞叹代码的美妙。</p><h2 id="Retrofit使用（what）"><a href="#Retrofit使用（what）" class="headerlink" title="Retrofit使用（what）"></a>Retrofit使用（what）</h2><p>详细的了解Retrofit使用及API可以到<a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit的Github</a>。</p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>首先，我们需要创建一个请求接口，内部是一个请求方法，通过注解的方式定义请求类型及url</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHttpRequestTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"api/data/福利/{number}/{page}"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>BaseModel<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Benefit<span class="token operator">>>></span> <span class="token function">getBenefits</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以愉快地使用Retrofit。</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://gank.io/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IHttpRequestTest iHttpRequestTest <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>IHttpRequestTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>BaseModel<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Benefit<span class="token operator">>>></span> call <span class="token operator">=</span> iHttpRequestTest<span class="token punctuation">.</span><span class="token function">getBenefits</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>BaseModel<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Benefit<span class="token operator">>>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Call<span class="token operator">&lt;</span>BaseModel<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Benefit<span class="token operator">>>></span> call<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Response<span class="token operator">&lt;</span>BaseModel<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Benefit<span class="token operator">>>></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>results <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            myAdapter<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Call<span class="token operator">&lt;</span>BaseModel<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Benefit<span class="token operator">>>></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"请求失败："</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一般http的请求步骤"><a href="#一般http的请求步骤" class="headerlink" title="一般http的请求步骤"></a>一般http的请求步骤</h3><p><img src="https://user-gold-cdn.xitu.io/2019/5/6/16a8c030ed7c8401?w=750&h=526&f=png&s=27279" alt="http请求步骤"><br>如上图，对于一般http请求：</p><ul><li>生成request请求，包括请求类型，url等等，放入Excutor队列</li><li>请求在Excutor中循环进行httpcall请求</li><li>等待请求回调</li></ul><p>接下来，我们就可以根据这个一般的http请求步骤，通过debug的形式弄清楚Retrofit的内部逻辑。</p><h2 id="Retrofit源码解析"><a href="#Retrofit源码解析" class="headerlink" title="Retrofit源码解析"></a>Retrofit源码解析</h2><h3 id="探索Retrofit对象初始化时参数的真正含义"><a href="#探索Retrofit对象初始化时参数的真正含义" class="headerlink" title="探索Retrofit对象初始化时参数的真正含义"></a>探索Retrofit对象初始化时参数的真正含义</h3><p>首先第一步，就是生产Retrofit对象，并传入基本的参数。</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://gank.io/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入Retrofit类的源码，可以看到build方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Retrofit <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseUrl <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Base URL required."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    okhttp3<span class="token punctuation">.</span>Call<span class="token punctuation">.</span>Factory callFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callFactory<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        callFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果callbackExcutor为空，创建默认的callbackEcxutor</span>    Executor callbackExecutor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbackExecutor<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackExecutor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    callbackExecutor <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">defaultCallbackExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Make a defensive copy of the adapters and add the default Call adapter.</span>    List<span class="token operator">&lt;</span>CallAdapter<span class="token punctuation">.</span>Factory<span class="token operator">></span> callAdapterFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callAdapterFactories<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加默认的callAdapterFactories</span>    callAdapterFactories<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>platform<span class="token punctuation">.</span><span class="token function">defaultCallAdapterFactories</span><span class="token punctuation">(</span>callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Make a defensive copy of the converters.</span>    List<span class="token operator">&lt;</span>Converter<span class="token punctuation">.</span>Factory<span class="token operator">></span> converterFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>        <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>converterFactories<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> platform<span class="token punctuation">.</span><span class="token function">defaultConverterFactoriesSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Add the built-in converter factory first. This prevents overriding its behavior but also</span>    <span class="token comment" spellcheck="true">// ensures correct behavior when using converters that consume all types.</span>    converterFactories<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BuiltInConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    converterFactories<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>converterFactories<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果没有自定义converterFactories，将使用默认的converterFactories</span>    converterFactories<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>platform<span class="token punctuation">.</span><span class="token function">defaultConverterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回Retrofit对象，包括在Builder中添加的自定义参数。</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit</span><span class="token punctuation">(</span>callFactory<span class="token punctuation">,</span> baseUrl<span class="token punctuation">,</span> <span class="token function">unmodifiableList</span><span class="token punctuation">(</span>converterFactories<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">unmodifiableList</span><span class="token punctuation">(</span>callAdapterFactories<span class="token punctuation">)</span><span class="token punctuation">,</span> callbackExecutor<span class="token punctuation">,</span> validateEagerly<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，生成的retrofit对象有五个参数必须要存在。</p><ul><li><code>baseUrl</code>就不用多说了，是必须的。</li><li><code>callFactory</code>使用的是OkHttp3中的<code>OkHttpClient</code>。</li><li><code>callbackExcutor</code>与<code>callAdapterFactory</code>中的<code>callAdapter</code>都对应一般请求步骤中的<code>Excutor</code>，只不过<code>callbackExcutor</code>用于在请求内部回调中切换线程，回调的方法存在哪个线程中取决于<code>callbackExcutor</code>在哪个线程。比如请求要在子线程中，回调的方法在主线程中。</li><li><code>callAdapter</code>是真正的请求对象，<code>callbackExcutor</code>相当于在<code>callAdapter</code>中切换线程。</li><li><code>converterFactory</code>是用来解析返回的json数据的。当然这些具体的解释在下面的分析中都会看到。</li></ul><p>有源码可看出，默认的<code>callbackExcutor</code>、<code>callAdapterFactory</code>、<code>converterFactory</code>添加都与<code>platform</code>对象有关。这是一个<code>Platform</code>类，进入研究一下。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Platform</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Platform PLATFORM <span class="token operator">=</span> <span class="token function">findPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> Platform <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> PLATFORM<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Platform <span class="token function">findPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.os.Build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Android</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.Optional"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Java8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Nullable</span> Executor <span class="token function">defaultCallbackExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span>  List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token operator">></span> <span class="token function">defaultCallAdapterFactories</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@Nullable</span> Executor callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>  List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token operator">></span> <span class="token function">defaultConverterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>  <span class="token annotation punctuation">@IgnoreJRERequirement</span> <span class="token comment" spellcheck="true">// Only classloaded and used on Java 8.</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Java8</span> <span class="token keyword">extends</span> <span class="token class-name">Platform</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Android</span> <span class="token keyword">extends</span> <span class="token class-name">Platform</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Executor <span class="token function">defaultCallbackExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MainThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CallAdapter<span class="token punctuation">.</span>Factory</span><span class="token operator">></span> <span class="token function">defaultCallAdapterFactories</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@Nullable</span> Executor callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackExecutor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ExecutorCallAdapterFactory executorFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCallAdapterFactory</span><span class="token punctuation">(</span>callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">24</span>        <span class="token operator">?</span> <span class="token function">asList</span><span class="token punctuation">(</span>CompletableFutureCallAdapterFactory<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">,</span> executorFactory<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">singletonList</span><span class="token punctuation">(</span>executorFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span><span class="token operator">></span> <span class="token function">defaultConverterFactories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">24</span>          <span class="token operator">?</span> <span class="token function">singletonList</span><span class="token punctuation">(</span>OptionalConverterFactory<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span>          <span class="token operator">:</span> Collections<span class="token punctuation">.</span>&lt;Converter<span class="token punctuation">.</span>Factory<span class="token operator">></span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MainThreadExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容有点多，这里我只提取了对现在有用的。整体来看，<code>Platform</code>内部有两个子类继承了该类<code>Android与Java8</code>。还有一个get方法，获取Platform静态实例，静态实例调用findPlatform()方法。这个方法是根据程序所执行的环境决定是返回一个<code>Android</code>实例还是<code>Java8</code>实例或者<code>Platform</code>实例。这里我们的环境是<code>Android</code>，所以具体看<code>Android</code>类中的方法。</p><ul><li>defaultCallbackExecutor()方法，返回了<code>MainThreadExecutor</code>类实例。此类在Android类内部，可以清晰的看出其中的handler静态变量是用的主线程的looper。也就是说，默认的<code>callbackExcutor</code>是运行在主线程的。</li><li>defaultCallAdapterFactories()方法，参数是上面得到的<code>callbackExcutor</code>。方法内部创建了<code>ExecutorCallAdapterFactory</code>类实例，并返回该实例的List。</li><li>defaultConverterFactories()方法，返回了<code>OptionalConverterFactory</code>实例，此类中的转换<code>converter()</code>方法只检查了参数是否为空就将其返回了，说明默认的回调数据是不进行任何转换的。</li></ul><p>至此，三个默认参数已确定。</p><h3 id="获得自定义接口对象"><a href="#获得自定义接口对象" class="headerlink" title="获得自定义接口对象"></a>获得自定义接口对象</h3><p><code>IHttpRequestTest iHttpRequestTest = retrofit.create(IHttpRequestTest.class);</code><br>这是接下来的执行步骤，自定义接口对象由retrofit类中的create方法创建，进去探讨一下。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Utils<span class="token punctuation">.</span><span class="token function">validateServiceInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>validateEagerly<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">eagerlyValidateMethods</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> service <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">final</span> Platform platform <span class="token operator">=</span> Platform<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">private</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> emptyArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>              <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If the method is a method from Object then defer to normal invocation.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>platform<span class="token punctuation">.</span><span class="token function">isDefaultMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> platform<span class="token punctuation">.</span><span class="token function">invokeDefaultMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> service<span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">loadServiceMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>args <span class="token operator">!=</span> null <span class="token operator">?</span> args <span class="token operator">:</span> emptyArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法返回的是通过反射获得自定义接口的代理类，并在类中重写了invoke方法。这表明当该类中的方法被执行时，就会拦截此方法。</p><h3 id="拦截并解析方法。"><a href="#拦截并解析方法。" class="headerlink" title="拦截并解析方法。"></a>拦截并解析方法。</h3><p><code>Call&lt;BaseModel&lt;ArrayList&lt;Benefit&gt;&gt;&gt; call = iHttpRequestTest.getBenefits(40, 2);</code><br>由上一步骤可知，当执行代理类中的方法时，会被拦截。并最终执行<code>loadServiceMethod(method).invoke(args != null ? args : emptyArgs);</code>方法并返回。先看一下<code>loadServiceMethod(method)</code>方法。</p><pre class="line-numbers language-java"><code class="language-java">ServiceMethod<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadServiceMethod</span><span class="token punctuation">(</span>Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//serviceMethodCache,如果执行过此方法，就会有缓存存在这里，直接取出即可</span>    ServiceMethod<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result <span class="token operator">=</span> serviceMethodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>serviceMethodCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> serviceMethodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> ServiceMethod<span class="token punctuation">.</span><span class="token function">parseAnnotations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceMethodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嗯…，除了前面与缓存有关的东西，又跑到了<code>ServiceMethod</code>类中的<code>parseAnnotations(this, method)</code>方法里。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ServiceMethod</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ServiceMethod<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">parseAnnotations</span><span class="token punctuation">(</span>Retrofit retrofit<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RequestFactory requestFactory <span class="token operator">=</span> RequestFactory<span class="token punctuation">.</span><span class="token function">parseAnnotations</span><span class="token punctuation">(</span>retrofit<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    Type returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Utils<span class="token punctuation">.</span><span class="token function">hasUnresolvableType</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token function">methodError</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>          <span class="token string">"Method return type must not include a type variable or wildcard: %s"</span><span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>returnType <span class="token operator">==</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token function">methodError</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"Service methods cannot return void."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> HttpServiceMethod<span class="token punctuation">.</span><span class="token function">parseAnnotations</span><span class="token punctuation">(</span>retrofit<span class="token punctuation">,</span> method<span class="token punctuation">,</span> requestFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">abstract</span> T <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个抽象类，第一句<code>RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);</code>，是解析方法构建request参数的。RequestFactory类中内容比较多，简单讲一下就是通过获得方法注解、返回类型、方法参数，分别进行解析。</p><p>最后它又跑到<code>HttpServiceMethod</code>类中了。此类继承了<code>ServiceMethod</code>类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token operator">&lt;</span>ResponseT<span class="token punctuation">,</span> ReturnT<span class="token operator">></span> HttpServiceMethod<span class="token operator">&lt;</span>ResponseT<span class="token punctuation">,</span> ReturnT<span class="token operator">></span> <span class="token function">parseAnnotations</span><span class="token punctuation">(</span>      Retrofit retrofit<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> RequestFactory requestFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    CallAdapter<span class="token operator">&lt;</span>ResponseT<span class="token punctuation">,</span> ReturnT<span class="token operator">></span> callAdapter <span class="token operator">=</span> <span class="token function">createCallAdapter</span><span class="token punctuation">(</span>retrofit<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    Type responseType <span class="token operator">=</span> callAdapter<span class="token punctuation">.</span><span class="token function">responseType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Converter<span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> ResponseT<span class="token operator">></span> responseConverter <span class="token operator">=</span>        <span class="token function">createResponseConverter</span><span class="token punctuation">(</span>retrofit<span class="token punctuation">,</span> method<span class="token punctuation">,</span> responseType<span class="token punctuation">)</span><span class="token punctuation">;</span>    okhttp3<span class="token punctuation">.</span>Call<span class="token punctuation">.</span>Factory callFactory <span class="token operator">=</span> retrofit<span class="token punctuation">.</span>callFactory<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpServiceMethod</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requestFactory<span class="token punctuation">,</span> callFactory<span class="token punctuation">,</span> callAdapter<span class="token punctuation">,</span> responseConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>ResponseT<span class="token punctuation">,</span> ReturnT<span class="token operator">></span> CallAdapter<span class="token operator">&lt;</span>ResponseT<span class="token punctuation">,</span> ReturnT<span class="token operator">></span> <span class="token function">createCallAdapter</span><span class="token punctuation">(</span>      Retrofit retrofit<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Type returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>CallAdapter<span class="token operator">&lt;</span>ResponseT<span class="token punctuation">,</span> ReturnT<span class="token operator">></span><span class="token punctuation">)</span> retrofit<span class="token punctuation">.</span><span class="token function">callAdapter</span><span class="token punctuation">(</span>returnType<span class="token punctuation">,</span> annotations<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>ResponseT<span class="token operator">></span> Converter<span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> ResponseT<span class="token operator">></span> <span class="token function">createResponseConverter</span><span class="token punctuation">(</span>      Retrofit retrofit<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Type responseType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retrofit<span class="token punctuation">.</span><span class="token function">responseBodyConverter</span><span class="token punctuation">(</span>responseType<span class="token punctuation">,</span> annotations<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化了异常检测类代码，可以看到最后返回的是<code>HttpServiceMethod</code>类的实例对象，并将retrofit中的一些默认参数传了进去。</p><p>解析完了<code>loadServiceMethod(method)</code>，接下来就是执行invoke方法了。由于<code>loadServiceMethod(method)</code>返回的是<code>HttpServiceMethod</code>类的实例对象，所以执行的就是<code>HttpServiceMethod</code>类中的invoke方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span> ReturnT <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> callAdapter<span class="token punctuation">.</span><span class="token function">adapt</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">OkHttpCall</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requestFactory<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callFactory<span class="token punctuation">,</span> responseConverter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此方法很简单，调用了callAdapter中的adapt方法，参数是一个OkHttpCall，字面意思就是将<code>OkHttpCall</code>适配为其他类。那么这个类是什么什么呢。应该是我们需要返回的<code>Call&lt;BaseModel&lt;ArrayList&lt;Benefit&gt;&gt;&gt;</code>类。那么怎么适配的呢。上面我们已经说到，retrofi中的默认参数<code>callAdapterFactories</code>是<code>ExecutorCallAdapterFactory</code>类，而<code>callAdapterFactories</code>中的<code>callAdapter</code>是通过<code>callAdapterFactories.get()</code>获得的，那么就要去这里面找了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> CallAdapter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> <span class="token function">get</span><span class="token punctuation">(</span>      Type returnType<span class="token punctuation">,</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations<span class="token punctuation">,</span> Retrofit retrofit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getRawType</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span> <span class="token operator">!=</span> Call<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> Type responseType <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">getCallResponseType</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CallAdapter</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Call<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Type <span class="token function">responseType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> responseType<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Call<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">adapt</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>Object<span class="token operator">></span> call<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCallbackCall</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>callbackExecutor<span class="token punctuation">,</span> call<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回的<code>CallAdapter</code>对象就是我们需要的。其中重写了adapt方法，也是我们要找的。它又返回了<code>ExecutorCallbackCall</code>对象，第一个参数就是默认运行在主线程中的<code>callbackExecutor</code>，第二个参数则是调用时传进来的<code>OkHttpCall</code>对象。所以说我们需要返回的<code>Call&lt;BaseModel&lt;ArrayList&lt;Benefit&gt;&gt;&gt;</code>对象就是<code>ExecutorCallbackCall</code>对象。</p><h3 id="依靠OkHttp3进行网络请求，转换回调函数线程到主线程。"><a href="#依靠OkHttp3进行网络请求，转换回调函数线程到主线程。" class="headerlink" title="依靠OkHttp3进行网络请求，转换回调函数线程到主线程。"></a>依靠OkHttp3进行网络请求，转换回调函数线程到主线程。</h3><p><code>call.enqueue(new Callback&lt;BaseModel&lt;ArrayList&lt;Benefit&gt;&gt;&gt;() {...});</code>,终于到最后一步了，拿着上一步返回的<code>Call&lt;BaseModel&lt;ArrayList&lt;Benefit&gt;&gt;&gt;</code>对象进行异步请求。调用了enqueue方法，也就是<code>ExecutorCallbackCall</code>中的enqueue方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">ExecutorCallbackCall</span><span class="token punctuation">(</span>Executor callbackExecutor<span class="token punctuation">,</span> Call<span class="token operator">&lt;</span>T<span class="token operator">></span> delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>callbackExecutor <span class="token operator">=</span> callbackExecutor<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> Callback<span class="token operator">&lt;</span>T<span class="token operator">></span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">checkNotNull</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token string">"callback == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      delegate<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>T<span class="token operator">></span> call<span class="token punctuation">,</span> <span class="token keyword">final</span> Response<span class="token operator">&lt;</span>T<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>          callbackExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.</span>                callback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span>ExecutorCallbackCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                callback<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>ExecutorCallbackCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>T<span class="token operator">></span> call<span class="token punctuation">,</span> <span class="token keyword">final</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>          callbackExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              callback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span>ExecutorCallbackCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造方法给了出来，变量名有些转换。<code>callbackExecutor</code>依然是在主线程中的那个<code>callbackExecutor</code>，<code>delegate</code>是上一步传进来的<code>OkHttpCall</code>对象。而enqueue的参数callback则是我们自己传入的callback。</p><p>方法中首先是<code>delegate</code>也就是OkHttp3进行的异步请求，在回调的函数中，通过<code>callbackExecutor</code>使线程切换为主线程，再调用我们自己的callback中对应的函数，使我们可以再回调中进行操作，并且是在主线程中。</p><p><code>OkHttpCall</code>这个类就不在多讲了，主要作用是retrofit通过OkHttp3进行请求的一个转换。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一次分析源码，虽然有视频的帮助，但许多类之间跳来跳去的让人眼花缭乱，很艰难地顺了下来。有了这样一个大概的了解，接下来就要分析其设计模式，欣赏其漂亮的解耦套路。当然，如果你已经有了上面的了解，接下来看<a href="https://www.jianshu.com/p/fb8d21978e38" target="_blank" rel="noopener">Retrofit分析-经典设计模式案例</a>就会简单明了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年终总结</title>
      <link href="/2019/12/31/2019-nian-zhong-zong-jie/"/>
      <url>/2019/12/31/2019-nian-zhong-zong-jie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-ezkAlhlS" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="0005V9zG4OuTes" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><p>搞了好几天，也总算是搭建了一个自己的博客。在此感谢<a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">大佬的超详细Hexo+Github博客搭建小白教程</a>，虽然现在我对于hexo还是有点一知半解，不过随着后面的坚持，对于hexo应该也会越来越熟练，自己的博客也会具有自己的特色。</p><p>踩着2019年的尾巴，也来做一下这一年的总结。三年多的大学时光确实稍纵即逝，不知不觉大四也已经过了大半，想想大一刚入学时对大学生活的憧憬，现在回过头来，确实差强人意。平平淡淡，一个普普通通的大学生拥有的大学生活，仅此而已。</p><h1 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h1><p>回首2019年，其实只做了了一件事，<strong>实习</strong>。</p><p>2019年开学伊始，是一个不断积累的过程。身处非计算机专业，要想在互联网技术岗位谋一片天地，很多东西都需要自己去积累。不过还好，好歹专业还有java、c、android这样的基础课程，也算是擦了点边。不过也仅此而已，更深层的东西仍需自己去挖掘。回想大一的时候，已经想过未来自己要进互联网行业，可惜仅仅是想法而已，自学个c语言慢吞吞的，看到数据结构、算法导论又头疼的要命，结果2019年算是到还债的时候了。每次下课、每个晚上、每个周末都差不多泡在了题海、各种各样的校招面试知识总结中，不过越看越觉得像是在闭门造车，不在真正的项目中进行实战，这些总结过的知识点在心里始终像是无根的浮萍，随时都会飘走。</p><img src="/2019/12/31/2019-nian-zhong-zong-jie/0.jpg" width="500" height="500"><p>四、五、六月份，也开始陆续投递简历找暑假实习。简历上的东西仅有之前做过的学院举行的it农场比赛的作品—一个笔记类的app，显得很苍白，投了好几家都不了了之。不过幸运的是，最后一血献给了腾讯音乐，然后就没然后了，初试就被虐的找不到北，很基础的知识点却始终答不上来，基础差的要命。直到7月份初，去面了映客直播，第二天就给了答复说可以去实习。毕业实习也算是有了着落。</p><img src="/2019/12/31/2019-nian-zhong-zong-jie/1.jpg" width="500" height="500" title="哈哈映宝，我也有一个"><p>接下来的半年时间，就是上班时光。初入职场，熟悉工作环境、工作流程，了解职场规则，接触上市项目的代码，一切都充满着新鲜、未知以及巨大的挑战。职场不同于校园，在这样的环境中，也确实得到了很大的锻炼，技术能力、办事能力、沟通能力得到了不同程度的提高。也很幸运的结识一帮同事，可以一起谈天说地，或者是在需求上、bug上争论个不休。</p><img src="/2019/12/31/2019-nian-zhong-zong-jie/2.jpg" width="500" height="500" title="圣诞快乐呀"><p>直到前几天，实习结束回校，实习阶段、2019年也都算是换上了一个句号。不管这个句号是否圆满，2019年也已经过去，当我回首，也确没有因为虚度光阴而悔恨。</p><h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><p>2020年即将到来，迎面而来的就是毕业设计。因为实习做的是android开发，所以也找了对应的导师，给我安排了一个<strong>基于安卓的人机交互游戏系统</strong>，曾经开题报告就让我为难的要死，不过现在确定了具体的方向，也算是有个大概的框架。通过<a href="https://zh.wikipedia.org/wiki/Leap_Motion" target="_blank" rel="noopener">leap motion</a>手势去控制移动端游戏，虽然之前没接触过leap motion，更没开发过游戏，并且网上通过leap motion去控制手机也都是外国人玩的东西，不过我还是决定做这个了，毕竟在我接触leap motion之后，我也觉得这玩意是真的好玩。。。</p><img src="/2019/12/31/2019-nian-zhong-zong-jie/3.jpg" width="500" height="500" title="leap motion"><p>然后还有一个更重要的事，就是春招。虽然在实习时已经表态要留下来，不过始终感觉平（xin）台（zi）还是有点低（shao），接下来还是要好好准备准备，再战春招，给自己一个满意的答复，不留遗憾。</p><p>剩下的，就是毕业后的事情了。到时候得租一个好点的房子，毕竟小可爱要来广州啦。从高二到现在，两年同班到三年异地，着实不易。性格原因，和我在一起确实受很多委屈，不过再有半年时光，黎明终会到来呀。此刻，我在安安静静码字，想必你已经到朋友家开始跨年了吧，就让我们一起，在不同的空间迎接2020年的到来吧！</p><img src="/2019/12/31/2019-nian-zhong-zong-jie/4.jpg" width="500" height="500" title="哈哈，刚好在朋友圈看到她和朋友们一起跨年，悄咪咪的把她抱上来"><p>新的一年，就祝愿自己心想事成吧！</p><blockquote><p>喔啊 我爱的是我们的梦</p><p>哈 你爱的是一起做梦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
